/*
 * This file is generated by jOOQ.
 */
package org.trustdeck.jooq.generated.tables.pojos;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Index;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import org.trustdeck.jooq.generated.tables.interfaces.IAlgorithm;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "algorithm",
    schema = "public",
    uniqueConstraints = {
        @UniqueConstraint(name = "algorithm_name_alphabet_randomalgorithmdesiredsize_randomal_key", columnNames = { "name", "alphabet", "randomalgorithmdesiredsize", "randomalgorithmdesiredsuccessprobability", "pseudonymlength", "paddingcharacter", "addcheckdigit", "lengthincludescheckdigit" })
    },
    indexes = {
        @Index(name = "algorithm_name_uindex", columnList = "name ASC")
    }
)
public class Algorithm implements IAlgorithm {

    private static final long serialVersionUID = 1L;

    private Integer id;
    private String name;
    private String alphabet;
    private Long randomalgorithmdesiredsize;
    private Double randomalgorithmdesiredsuccessprobability;
    private Long consecutivevaluecounter;
    private Integer pseudonymlength;
    private String paddingcharacter;
    private Boolean addcheckdigit;
    private Boolean lengthincludescheckdigit;
    private String salt;
    private Integer saltlength;

    public Algorithm() {}

    public Algorithm(IAlgorithm value) {
        this.id = value.getId();
        this.name = value.getName();
        this.alphabet = value.getAlphabet();
        this.randomalgorithmdesiredsize = value.getRandomalgorithmdesiredsize();
        this.randomalgorithmdesiredsuccessprobability = value.getRandomalgorithmdesiredsuccessprobability();
        this.consecutivevaluecounter = value.getConsecutivevaluecounter();
        this.pseudonymlength = value.getPseudonymlength();
        this.paddingcharacter = value.getPaddingcharacter();
        this.addcheckdigit = value.getAddcheckdigit();
        this.lengthincludescheckdigit = value.getLengthincludescheckdigit();
        this.salt = value.getSalt();
        this.saltlength = value.getSaltlength();
    }

    public Algorithm(
        Integer id,
        String name,
        String alphabet,
        Long randomalgorithmdesiredsize,
        Double randomalgorithmdesiredsuccessprobability,
        Long consecutivevaluecounter,
        Integer pseudonymlength,
        String paddingcharacter,
        Boolean addcheckdigit,
        Boolean lengthincludescheckdigit,
        String salt,
        Integer saltlength
    ) {
        this.id = id;
        this.name = name;
        this.alphabet = alphabet;
        this.randomalgorithmdesiredsize = randomalgorithmdesiredsize;
        this.randomalgorithmdesiredsuccessprobability = randomalgorithmdesiredsuccessprobability;
        this.consecutivevaluecounter = consecutivevaluecounter;
        this.pseudonymlength = pseudonymlength;
        this.paddingcharacter = paddingcharacter;
        this.addcheckdigit = addcheckdigit;
        this.lengthincludescheckdigit = lengthincludescheckdigit;
        this.salt = salt;
        this.saltlength = saltlength;
    }

    /**
     * Getter for <code>public.algorithm.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    @Override
    public Integer getId() {
        return this.id;
    }

    /**
     * Setter for <code>public.algorithm.id</code>.
     */
    @Override
    public Algorithm setId(Integer id) {
        this.id = id;
        return this;
    }

    /**
     * Getter for <code>public.algorithm.name</code>.
     */
    @Column(name = "name", nullable = false)
    @NotNull
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>public.algorithm.name</code>.
     */
    @Override
    public Algorithm setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Getter for <code>public.algorithm.alphabet</code>.
     */
    @Column(name = "alphabet", nullable = false)
    @NotNull
    @Override
    public String getAlphabet() {
        return this.alphabet;
    }

    /**
     * Setter for <code>public.algorithm.alphabet</code>.
     */
    @Override
    public Algorithm setAlphabet(String alphabet) {
        this.alphabet = alphabet;
        return this;
    }

    /**
     * Getter for <code>public.algorithm.randomalgorithmdesiredsize</code>.
     */
    @Column(name = "randomalgorithmdesiredsize", nullable = false)
    @NotNull
    @Override
    public Long getRandomalgorithmdesiredsize() {
        return this.randomalgorithmdesiredsize;
    }

    /**
     * Setter for <code>public.algorithm.randomalgorithmdesiredsize</code>.
     */
    @Override
    public Algorithm setRandomalgorithmdesiredsize(Long randomalgorithmdesiredsize) {
        this.randomalgorithmdesiredsize = randomalgorithmdesiredsize;
        return this;
    }

    /**
     * Getter for
     * <code>public.algorithm.randomalgorithmdesiredsuccessprobability</code>.
     */
    @Column(name = "randomalgorithmdesiredsuccessprobability", nullable = false)
    @NotNull
    @Override
    public Double getRandomalgorithmdesiredsuccessprobability() {
        return this.randomalgorithmdesiredsuccessprobability;
    }

    /**
     * Setter for
     * <code>public.algorithm.randomalgorithmdesiredsuccessprobability</code>.
     */
    @Override
    public Algorithm setRandomalgorithmdesiredsuccessprobability(Double randomalgorithmdesiredsuccessprobability) {
        this.randomalgorithmdesiredsuccessprobability = randomalgorithmdesiredsuccessprobability;
        return this;
    }

    /**
     * Getter for <code>public.algorithm.consecutivevaluecounter</code>.
     */
    @Column(name = "consecutivevaluecounter", nullable = false)
    @NotNull
    @Override
    public Long getConsecutivevaluecounter() {
        return this.consecutivevaluecounter;
    }

    /**
     * Setter for <code>public.algorithm.consecutivevaluecounter</code>.
     */
    @Override
    public Algorithm setConsecutivevaluecounter(Long consecutivevaluecounter) {
        this.consecutivevaluecounter = consecutivevaluecounter;
        return this;
    }

    /**
     * Getter for <code>public.algorithm.pseudonymlength</code>.
     */
    @Column(name = "pseudonymlength", nullable = false)
    @NotNull
    @Override
    public Integer getPseudonymlength() {
        return this.pseudonymlength;
    }

    /**
     * Setter for <code>public.algorithm.pseudonymlength</code>.
     */
    @Override
    public Algorithm setPseudonymlength(Integer pseudonymlength) {
        this.pseudonymlength = pseudonymlength;
        return this;
    }

    /**
     * Getter for <code>public.algorithm.paddingcharacter</code>.
     */
    @Column(name = "paddingcharacter", nullable = false, length = 1)
    @NotNull
    @Size(max = 1)
    @Override
    public String getPaddingcharacter() {
        return this.paddingcharacter;
    }

    /**
     * Setter for <code>public.algorithm.paddingcharacter</code>.
     */
    @Override
    public Algorithm setPaddingcharacter(String paddingcharacter) {
        this.paddingcharacter = paddingcharacter;
        return this;
    }

    /**
     * Getter for <code>public.algorithm.addcheckdigit</code>.
     */
    @Column(name = "addcheckdigit", nullable = false)
    @NotNull
    @Override
    public Boolean getAddcheckdigit() {
        return this.addcheckdigit;
    }

    /**
     * Setter for <code>public.algorithm.addcheckdigit</code>.
     */
    @Override
    public Algorithm setAddcheckdigit(Boolean addcheckdigit) {
        this.addcheckdigit = addcheckdigit;
        return this;
    }

    /**
     * Getter for <code>public.algorithm.lengthincludescheckdigit</code>.
     */
    @Column(name = "lengthincludescheckdigit", nullable = false)
    @NotNull
    @Override
    public Boolean getLengthincludescheckdigit() {
        return this.lengthincludescheckdigit;
    }

    /**
     * Setter for <code>public.algorithm.lengthincludescheckdigit</code>.
     */
    @Override
    public Algorithm setLengthincludescheckdigit(Boolean lengthincludescheckdigit) {
        this.lengthincludescheckdigit = lengthincludescheckdigit;
        return this;
    }

    /**
     * Getter for <code>public.algorithm.salt</code>.
     */
    @Column(name = "salt", nullable = false)
    @NotNull
    @Override
    public String getSalt() {
        return this.salt;
    }

    /**
     * Setter for <code>public.algorithm.salt</code>.
     */
    @Override
    public Algorithm setSalt(String salt) {
        this.salt = salt;
        return this;
    }

    /**
     * Getter for <code>public.algorithm.saltlength</code>.
     */
    @Column(name = "saltlength", nullable = false)
    @NotNull
    @Override
    public Integer getSaltlength() {
        return this.saltlength;
    }

    /**
     * Setter for <code>public.algorithm.saltlength</code>.
     */
    @Override
    public Algorithm setSaltlength(Integer saltlength) {
        this.saltlength = saltlength;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Algorithm other = (Algorithm) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.alphabet == null) {
            if (other.alphabet != null)
                return false;
        }
        else if (!this.alphabet.equals(other.alphabet))
            return false;
        if (this.randomalgorithmdesiredsize == null) {
            if (other.randomalgorithmdesiredsize != null)
                return false;
        }
        else if (!this.randomalgorithmdesiredsize.equals(other.randomalgorithmdesiredsize))
            return false;
        if (this.randomalgorithmdesiredsuccessprobability == null) {
            if (other.randomalgorithmdesiredsuccessprobability != null)
                return false;
        }
        else if (!this.randomalgorithmdesiredsuccessprobability.equals(other.randomalgorithmdesiredsuccessprobability))
            return false;
        if (this.consecutivevaluecounter == null) {
            if (other.consecutivevaluecounter != null)
                return false;
        }
        else if (!this.consecutivevaluecounter.equals(other.consecutivevaluecounter))
            return false;
        if (this.pseudonymlength == null) {
            if (other.pseudonymlength != null)
                return false;
        }
        else if (!this.pseudonymlength.equals(other.pseudonymlength))
            return false;
        if (this.paddingcharacter == null) {
            if (other.paddingcharacter != null)
                return false;
        }
        else if (!this.paddingcharacter.equals(other.paddingcharacter))
            return false;
        if (this.addcheckdigit == null) {
            if (other.addcheckdigit != null)
                return false;
        }
        else if (!this.addcheckdigit.equals(other.addcheckdigit))
            return false;
        if (this.lengthincludescheckdigit == null) {
            if (other.lengthincludescheckdigit != null)
                return false;
        }
        else if (!this.lengthincludescheckdigit.equals(other.lengthincludescheckdigit))
            return false;
        if (this.salt == null) {
            if (other.salt != null)
                return false;
        }
        else if (!this.salt.equals(other.salt))
            return false;
        if (this.saltlength == null) {
            if (other.saltlength != null)
                return false;
        }
        else if (!this.saltlength.equals(other.saltlength))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.alphabet == null) ? 0 : this.alphabet.hashCode());
        result = prime * result + ((this.randomalgorithmdesiredsize == null) ? 0 : this.randomalgorithmdesiredsize.hashCode());
        result = prime * result + ((this.randomalgorithmdesiredsuccessprobability == null) ? 0 : this.randomalgorithmdesiredsuccessprobability.hashCode());
        result = prime * result + ((this.consecutivevaluecounter == null) ? 0 : this.consecutivevaluecounter.hashCode());
        result = prime * result + ((this.pseudonymlength == null) ? 0 : this.pseudonymlength.hashCode());
        result = prime * result + ((this.paddingcharacter == null) ? 0 : this.paddingcharacter.hashCode());
        result = prime * result + ((this.addcheckdigit == null) ? 0 : this.addcheckdigit.hashCode());
        result = prime * result + ((this.lengthincludescheckdigit == null) ? 0 : this.lengthincludescheckdigit.hashCode());
        result = prime * result + ((this.salt == null) ? 0 : this.salt.hashCode());
        result = prime * result + ((this.saltlength == null) ? 0 : this.saltlength.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Algorithm (");

        sb.append(id);
        sb.append(", ").append(name);
        sb.append(", ").append(alphabet);
        sb.append(", ").append(randomalgorithmdesiredsize);
        sb.append(", ").append(randomalgorithmdesiredsuccessprobability);
        sb.append(", ").append(consecutivevaluecounter);
        sb.append(", ").append(pseudonymlength);
        sb.append(", ").append(paddingcharacter);
        sb.append(", ").append(addcheckdigit);
        sb.append(", ").append(lengthincludescheckdigit);
        sb.append(", ").append(salt);
        sb.append(", ").append(saltlength);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IAlgorithm from) {
        setId(from.getId());
        setName(from.getName());
        setAlphabet(from.getAlphabet());
        setRandomalgorithmdesiredsize(from.getRandomalgorithmdesiredsize());
        setRandomalgorithmdesiredsuccessprobability(from.getRandomalgorithmdesiredsuccessprobability());
        setConsecutivevaluecounter(from.getConsecutivevaluecounter());
        setPseudonymlength(from.getPseudonymlength());
        setPaddingcharacter(from.getPaddingcharacter());
        setAddcheckdigit(from.getAddcheckdigit());
        setLengthincludescheckdigit(from.getLengthincludescheckdigit());
        setSalt(from.getSalt());
        setSaltlength(from.getSaltlength());
    }

    @Override
    public <E extends IAlgorithm> E into(E into) {
        into.from(this);
        return into;
    }
}
