/*
 * This file is generated by jOOQ.
 */
package org.trustdeck.jooq.generated.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function13;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.trustdeck.jooq.generated.Indexes;
import org.trustdeck.jooq.generated.Keys;
import org.trustdeck.jooq.generated.Public;
import org.trustdeck.jooq.generated.tables.records.PersonRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Person extends TableImpl<PersonRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.person</code>
     */
    public static final Person PERSON = new Person();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PersonRecord> getRecordType() {
        return PersonRecord.class;
    }

    /**
     * The column <code>public.person.id</code>.
     */
    public final TableField<PersonRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.person.firstname</code>.
     */
    public final TableField<PersonRecord, String> FIRSTNAME = createField(DSL.name("firstname"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.person.lastname</code>.
     */
    public final TableField<PersonRecord, String> LASTNAME = createField(DSL.name("lastname"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.person.birthname</code>.
     */
    public final TableField<PersonRecord, String> BIRTHNAME = createField(DSL.name("birthname"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.person.administrativegender</code>.
     */
    public final TableField<PersonRecord, String> ADMINISTRATIVEGENDER = createField(DSL.name("administrativegender"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>public.person.dateofbirth</code>.
     */
    public final TableField<PersonRecord, LocalDate> DATEOFBIRTH = createField(DSL.name("dateofbirth"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.person.street</code>.
     */
    public final TableField<PersonRecord, String> STREET = createField(DSL.name("street"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.person.postalcode</code>.
     */
    public final TableField<PersonRecord, String> POSTALCODE = createField(DSL.name("postalcode"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.person.city</code>.
     */
    public final TableField<PersonRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.person.country</code>.
     */
    public final TableField<PersonRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.person.identifier</code>.
     */
    public final TableField<PersonRecord, String> IDENTIFIER = createField(DSL.name("identifier"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.person.idtype</code>.
     */
    public final TableField<PersonRecord, String> IDTYPE = createField(DSL.name("idtype"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.person.identifieralgorithm</code>.
     */
    public final TableField<PersonRecord, Integer> IDENTIFIERALGORITHM = createField(DSL.name("identifieralgorithm"), SQLDataType.INTEGER.nullable(false), this, "");

    private Person(Name alias, Table<PersonRecord> aliased) {
        this(alias, aliased, null);
    }

    private Person(Name alias, Table<PersonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.person</code> table reference
     */
    public Person(String alias) {
        this(DSL.name(alias), PERSON);
    }

    /**
     * Create an aliased <code>public.person</code> table reference
     */
    public Person(Name alias) {
        this(alias, PERSON);
    }

    /**
     * Create a <code>public.person</code> table reference
     */
    public Person() {
        this(DSL.name("person"), null);
    }

    public <O extends Record> Person(Table<O> child, ForeignKey<O, PersonRecord> key) {
        super(child, key, PERSON);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PERSON_FIRSTNAME_LASTNAME_ADMGENDER_DOB_UINDEX, Indexes.PERSON_FIRSTNAME_LASTNAME_ADMGENDER_UINDEX, Indexes.PERSON_FIRSTNAME_LASTNAME_DOB_UINDEX, Indexes.PERSON_FIRSTNAME_LASTNAME_UINDEX, Indexes.PERSON_FIRSTNAME_UINDEX, Indexes.PERSON_IDENTIFIER_UINDEX, Indexes.PERSON_LASTNAME_UINDEX, Indexes.PERSON_STREET_POSTALCODE_CITY_COUNTRY_UINDEX);
    }

    @Override
    public Identity<PersonRecord, Integer> getIdentity() {
        return (Identity<PersonRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PersonRecord> getPrimaryKey() {
        return Keys.PERSON_PKEY;
    }

    @Override
    public List<UniqueKey<PersonRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PERSON_FIRSTNAME_LASTNAME_ADMINISTRATIVEGENDER_DATEOFBIRTH__KEY, Keys.PERSON_IDENTIFIER_IDTYPE_KEY);
    }

    @Override
    public List<ForeignKey<PersonRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PERSON__PERSON_IDENTIFIERALGORITHM_FKEY);
    }

    private transient Algorithm _algorithm;

    /**
     * Get the implicit join path to the <code>public.algorithm</code> table.
     */
    public Algorithm algorithm() {
        if (_algorithm == null)
            _algorithm = new Algorithm(this, Keys.PERSON__PERSON_IDENTIFIERALGORITHM_FKEY);

        return _algorithm;
    }

    @Override
    public Person as(String alias) {
        return new Person(DSL.name(alias), this);
    }

    @Override
    public Person as(Name alias) {
        return new Person(alias, this);
    }

    @Override
    public Person as(Table<?> alias) {
        return new Person(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Person rename(String name) {
        return new Person(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Person rename(Name name) {
        return new Person(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Person rename(Table<?> name) {
        return new Person(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, String, String, String, String, LocalDate, String, String, String, String, String, String, Integer> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function13<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super LocalDate, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function13<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super LocalDate, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
