/*
 * This file is generated by jOOQ.
 */
package org.trustdeck.jooq.generated.tables.pojos;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Index;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.time.LocalDate;

import org.trustdeck.jooq.generated.tables.interfaces.IPerson;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "person",
    schema = "public",
    uniqueConstraints = {
        @UniqueConstraint(name = "person_firstname_lastname_birthname_administrativegender_da_key", columnNames = { "firstname", "lastname", "birthname", "administrativegender", "dateofbirth", "street", "postalcode", "city", "country" }),
        @UniqueConstraint(name = "person_identifier_idtype_key", columnNames = { "identifier", "idtype" })
    },
    indexes = {
        @Index(name = "person_firstname_lastname_admgender_dob_uindex", columnList = "firstname ASC, lastname ASC, administrativegender ASC, dateofbirth ASC"),
        @Index(name = "person_firstname_lastname_admgender_uindex", columnList = "firstname ASC, lastname ASC, administrativegender ASC"),
        @Index(name = "person_firstname_lastname_dob_uindex", columnList = "firstname ASC, lastname ASC, dateofbirth ASC"),
        @Index(name = "person_firstname_lastname_uindex", columnList = "firstname ASC, lastname ASC"),
        @Index(name = "person_firstname_uindex", columnList = "firstname ASC"),
        @Index(name = "person_identifier_uindex", columnList = "identifier ASC"),
        @Index(name = "person_lastname_uindex", columnList = "lastname ASC"),
        @Index(name = "person_street_postalcode_city_country_uindex", columnList = "street ASC, postalcode ASC, city ASC, country ASC")
    }
)
public class Person implements IPerson {

    private static final long serialVersionUID = 1L;

    private Integer id;
    private String firstname;
    private String lastname;
    private String birthname;
    private String administrativegender;
    private LocalDate dateofbirth;
    private String street;
    private String postalcode;
    private String city;
    private String country;
    private String identifier;
    private String idtype;
    private Integer identifieralgorithm;

    public Person() {}

    public Person(IPerson value) {
        this.id = value.getId();
        this.firstname = value.getFirstname();
        this.lastname = value.getLastname();
        this.birthname = value.getBirthname();
        this.administrativegender = value.getAdministrativegender();
        this.dateofbirth = value.getDateofbirth();
        this.street = value.getStreet();
        this.postalcode = value.getPostalcode();
        this.city = value.getCity();
        this.country = value.getCountry();
        this.identifier = value.getIdentifier();
        this.idtype = value.getIdtype();
        this.identifieralgorithm = value.getIdentifieralgorithm();
    }

    public Person(
        Integer id,
        String firstname,
        String lastname,
        String birthname,
        String administrativegender,
        LocalDate dateofbirth,
        String street,
        String postalcode,
        String city,
        String country,
        String identifier,
        String idtype,
        Integer identifieralgorithm
    ) {
        this.id = id;
        this.firstname = firstname;
        this.lastname = lastname;
        this.birthname = birthname;
        this.administrativegender = administrativegender;
        this.dateofbirth = dateofbirth;
        this.street = street;
        this.postalcode = postalcode;
        this.city = city;
        this.country = country;
        this.identifier = identifier;
        this.idtype = idtype;
        this.identifieralgorithm = identifieralgorithm;
    }

    /**
     * Getter for <code>public.person.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    @Override
    public Integer getId() {
        return this.id;
    }

    /**
     * Setter for <code>public.person.id</code>.
     */
    @Override
    public Person setId(Integer id) {
        this.id = id;
        return this;
    }

    /**
     * Getter for <code>public.person.firstname</code>.
     */
    @Column(name = "firstname", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Override
    public String getFirstname() {
        return this.firstname;
    }

    /**
     * Setter for <code>public.person.firstname</code>.
     */
    @Override
    public Person setFirstname(String firstname) {
        this.firstname = firstname;
        return this;
    }

    /**
     * Getter for <code>public.person.lastname</code>.
     */
    @Column(name = "lastname", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Override
    public String getLastname() {
        return this.lastname;
    }

    /**
     * Setter for <code>public.person.lastname</code>.
     */
    @Override
    public Person setLastname(String lastname) {
        this.lastname = lastname;
        return this;
    }

    /**
     * Getter for <code>public.person.birthname</code>.
     */
    @Column(name = "birthname", length = 255)
    @Size(max = 255)
    @Override
    public String getBirthname() {
        return this.birthname;
    }

    /**
     * Setter for <code>public.person.birthname</code>.
     */
    @Override
    public Person setBirthname(String birthname) {
        this.birthname = birthname;
        return this;
    }

    /**
     * Getter for <code>public.person.administrativegender</code>.
     */
    @Column(name = "administrativegender", nullable = false, length = 1)
    @NotNull
    @Size(max = 1)
    @Override
    public String getAdministrativegender() {
        return this.administrativegender;
    }

    /**
     * Setter for <code>public.person.administrativegender</code>.
     */
    @Override
    public Person setAdministrativegender(String administrativegender) {
        this.administrativegender = administrativegender;
        return this;
    }

    /**
     * Getter for <code>public.person.dateofbirth</code>.
     */
    @Column(name = "dateofbirth")
    @Override
    public LocalDate getDateofbirth() {
        return this.dateofbirth;
    }

    /**
     * Setter for <code>public.person.dateofbirth</code>.
     */
    @Override
    public Person setDateofbirth(LocalDate dateofbirth) {
        this.dateofbirth = dateofbirth;
        return this;
    }

    /**
     * Getter for <code>public.person.street</code>.
     */
    @Column(name = "street", length = 255)
    @Size(max = 255)
    @Override
    public String getStreet() {
        return this.street;
    }

    /**
     * Setter for <code>public.person.street</code>.
     */
    @Override
    public Person setStreet(String street) {
        this.street = street;
        return this;
    }

    /**
     * Getter for <code>public.person.postalcode</code>.
     */
    @Column(name = "postalcode", length = 20)
    @Size(max = 20)
    @Override
    public String getPostalcode() {
        return this.postalcode;
    }

    /**
     * Setter for <code>public.person.postalcode</code>.
     */
    @Override
    public Person setPostalcode(String postalcode) {
        this.postalcode = postalcode;
        return this;
    }

    /**
     * Getter for <code>public.person.city</code>.
     */
    @Column(name = "city", length = 255)
    @Size(max = 255)
    @Override
    public String getCity() {
        return this.city;
    }

    /**
     * Setter for <code>public.person.city</code>.
     */
    @Override
    public Person setCity(String city) {
        this.city = city;
        return this;
    }

    /**
     * Getter for <code>public.person.country</code>.
     */
    @Column(name = "country", length = 100)
    @Size(max = 100)
    @Override
    public String getCountry() {
        return this.country;
    }

    /**
     * Setter for <code>public.person.country</code>.
     */
    @Override
    public Person setCountry(String country) {
        this.country = country;
        return this;
    }

    /**
     * Getter for <code>public.person.identifier</code>.
     */
    @Column(name = "identifier", nullable = false)
    @NotNull
    @Override
    public String getIdentifier() {
        return this.identifier;
    }

    /**
     * Setter for <code>public.person.identifier</code>.
     */
    @Override
    public Person setIdentifier(String identifier) {
        this.identifier = identifier;
        return this;
    }

    /**
     * Getter for <code>public.person.idtype</code>.
     */
    @Column(name = "idtype", nullable = false)
    @NotNull
    @Override
    public String getIdtype() {
        return this.idtype;
    }

    /**
     * Setter for <code>public.person.idtype</code>.
     */
    @Override
    public Person setIdtype(String idtype) {
        this.idtype = idtype;
        return this;
    }

    /**
     * Getter for <code>public.person.identifieralgorithm</code>.
     */
    @Column(name = "identifieralgorithm", nullable = false)
    @NotNull
    @Override
    public Integer getIdentifieralgorithm() {
        return this.identifieralgorithm;
    }

    /**
     * Setter for <code>public.person.identifieralgorithm</code>.
     */
    @Override
    public Person setIdentifieralgorithm(Integer identifieralgorithm) {
        this.identifieralgorithm = identifieralgorithm;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Person other = (Person) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.firstname == null) {
            if (other.firstname != null)
                return false;
        }
        else if (!this.firstname.equals(other.firstname))
            return false;
        if (this.lastname == null) {
            if (other.lastname != null)
                return false;
        }
        else if (!this.lastname.equals(other.lastname))
            return false;
        if (this.birthname == null) {
            if (other.birthname != null)
                return false;
        }
        else if (!this.birthname.equals(other.birthname))
            return false;
        if (this.administrativegender == null) {
            if (other.administrativegender != null)
                return false;
        }
        else if (!this.administrativegender.equals(other.administrativegender))
            return false;
        if (this.dateofbirth == null) {
            if (other.dateofbirth != null)
                return false;
        }
        else if (!this.dateofbirth.equals(other.dateofbirth))
            return false;
        if (this.street == null) {
            if (other.street != null)
                return false;
        }
        else if (!this.street.equals(other.street))
            return false;
        if (this.postalcode == null) {
            if (other.postalcode != null)
                return false;
        }
        else if (!this.postalcode.equals(other.postalcode))
            return false;
        if (this.city == null) {
            if (other.city != null)
                return false;
        }
        else if (!this.city.equals(other.city))
            return false;
        if (this.country == null) {
            if (other.country != null)
                return false;
        }
        else if (!this.country.equals(other.country))
            return false;
        if (this.identifier == null) {
            if (other.identifier != null)
                return false;
        }
        else if (!this.identifier.equals(other.identifier))
            return false;
        if (this.idtype == null) {
            if (other.idtype != null)
                return false;
        }
        else if (!this.idtype.equals(other.idtype))
            return false;
        if (this.identifieralgorithm == null) {
            if (other.identifieralgorithm != null)
                return false;
        }
        else if (!this.identifieralgorithm.equals(other.identifieralgorithm))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.firstname == null) ? 0 : this.firstname.hashCode());
        result = prime * result + ((this.lastname == null) ? 0 : this.lastname.hashCode());
        result = prime * result + ((this.birthname == null) ? 0 : this.birthname.hashCode());
        result = prime * result + ((this.administrativegender == null) ? 0 : this.administrativegender.hashCode());
        result = prime * result + ((this.dateofbirth == null) ? 0 : this.dateofbirth.hashCode());
        result = prime * result + ((this.street == null) ? 0 : this.street.hashCode());
        result = prime * result + ((this.postalcode == null) ? 0 : this.postalcode.hashCode());
        result = prime * result + ((this.city == null) ? 0 : this.city.hashCode());
        result = prime * result + ((this.country == null) ? 0 : this.country.hashCode());
        result = prime * result + ((this.identifier == null) ? 0 : this.identifier.hashCode());
        result = prime * result + ((this.idtype == null) ? 0 : this.idtype.hashCode());
        result = prime * result + ((this.identifieralgorithm == null) ? 0 : this.identifieralgorithm.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Person (");

        sb.append(id);
        sb.append(", ").append(firstname);
        sb.append(", ").append(lastname);
        sb.append(", ").append(birthname);
        sb.append(", ").append(administrativegender);
        sb.append(", ").append(dateofbirth);
        sb.append(", ").append(street);
        sb.append(", ").append(postalcode);
        sb.append(", ").append(city);
        sb.append(", ").append(country);
        sb.append(", ").append(identifier);
        sb.append(", ").append(idtype);
        sb.append(", ").append(identifieralgorithm);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IPerson from) {
        setId(from.getId());
        setFirstname(from.getFirstname());
        setLastname(from.getLastname());
        setBirthname(from.getBirthname());
        setAdministrativegender(from.getAdministrativegender());
        setDateofbirth(from.getDateofbirth());
        setStreet(from.getStreet());
        setPostalcode(from.getPostalcode());
        setCity(from.getCity());
        setCountry(from.getCountry());
        setIdentifier(from.getIdentifier());
        setIdtype(from.getIdtype());
        setIdentifieralgorithm(from.getIdentifieralgorithm());
    }

    @Override
    public <E extends IPerson> E into(E into) {
        into.from(this);
        return into;
    }
}
