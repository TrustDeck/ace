/*
 * This file is generated by jOOQ.
 */
package org.trustdeck.jooq.generated.tables.records;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Index;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record13;
import org.jooq.Row13;
import org.jooq.impl.UpdatableRecordImpl;
import org.trustdeck.jooq.generated.tables.Person;
import org.trustdeck.jooq.generated.tables.interfaces.IPerson;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "person",
    schema = "public",
    uniqueConstraints = {
        @UniqueConstraint(name = "person_firstname_lastname_birthname_administrativegender_da_key", columnNames = { "firstname", "lastname", "birthname", "administrativegender", "dateofbirth", "street", "postalcode", "city", "country" }),
        @UniqueConstraint(name = "person_identifier_idtype_key", columnNames = { "identifier", "idtype" })
    },
    indexes = {
        @Index(name = "person_firstname_lastname_admgender_dob_uindex", columnList = "firstname ASC, lastname ASC, administrativegender ASC, dateofbirth ASC"),
        @Index(name = "person_firstname_lastname_admgender_uindex", columnList = "firstname ASC, lastname ASC, administrativegender ASC"),
        @Index(name = "person_firstname_lastname_dob_uindex", columnList = "firstname ASC, lastname ASC, dateofbirth ASC"),
        @Index(name = "person_firstname_lastname_uindex", columnList = "firstname ASC, lastname ASC"),
        @Index(name = "person_firstname_uindex", columnList = "firstname ASC"),
        @Index(name = "person_identifier_uindex", columnList = "identifier ASC"),
        @Index(name = "person_lastname_uindex", columnList = "lastname ASC"),
        @Index(name = "person_street_postalcode_city_country_uindex", columnList = "street ASC, postalcode ASC, city ASC, country ASC")
    }
)
public class PersonRecord extends UpdatableRecordImpl<PersonRecord> implements Record13<Integer, String, String, String, String, LocalDate, String, String, String, String, String, String, Integer>, IPerson {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.person.id</code>.
     */
    @Override
    public PersonRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.person.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    @Override
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.person.firstname</code>.
     */
    @Override
    public PersonRecord setFirstname(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.person.firstname</code>.
     */
    @Column(name = "firstname", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Override
    public String getFirstname() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.person.lastname</code>.
     */
    @Override
    public PersonRecord setLastname(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.person.lastname</code>.
     */
    @Column(name = "lastname", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    @Override
    public String getLastname() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.person.birthname</code>.
     */
    @Override
    public PersonRecord setBirthname(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.person.birthname</code>.
     */
    @Column(name = "birthname", length = 255)
    @Size(max = 255)
    @Override
    public String getBirthname() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.person.administrativegender</code>.
     */
    @Override
    public PersonRecord setAdministrativegender(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.person.administrativegender</code>.
     */
    @Column(name = "administrativegender", nullable = false, length = 1)
    @NotNull
    @Size(max = 1)
    @Override
    public String getAdministrativegender() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.person.dateofbirth</code>.
     */
    @Override
    public PersonRecord setDateofbirth(LocalDate value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.person.dateofbirth</code>.
     */
    @Column(name = "dateofbirth")
    @Override
    public LocalDate getDateofbirth() {
        return (LocalDate) get(5);
    }

    /**
     * Setter for <code>public.person.street</code>.
     */
    @Override
    public PersonRecord setStreet(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.person.street</code>.
     */
    @Column(name = "street", length = 255)
    @Size(max = 255)
    @Override
    public String getStreet() {
        return (String) get(6);
    }

    /**
     * Setter for <code>public.person.postalcode</code>.
     */
    @Override
    public PersonRecord setPostalcode(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.person.postalcode</code>.
     */
    @Column(name = "postalcode", length = 20)
    @Size(max = 20)
    @Override
    public String getPostalcode() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.person.city</code>.
     */
    @Override
    public PersonRecord setCity(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.person.city</code>.
     */
    @Column(name = "city", length = 255)
    @Size(max = 255)
    @Override
    public String getCity() {
        return (String) get(8);
    }

    /**
     * Setter for <code>public.person.country</code>.
     */
    @Override
    public PersonRecord setCountry(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>public.person.country</code>.
     */
    @Column(name = "country", length = 100)
    @Size(max = 100)
    @Override
    public String getCountry() {
        return (String) get(9);
    }

    /**
     * Setter for <code>public.person.identifier</code>.
     */
    @Override
    public PersonRecord setIdentifier(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>public.person.identifier</code>.
     */
    @Column(name = "identifier", nullable = false)
    @NotNull
    @Override
    public String getIdentifier() {
        return (String) get(10);
    }

    /**
     * Setter for <code>public.person.idtype</code>.
     */
    @Override
    public PersonRecord setIdtype(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>public.person.idtype</code>.
     */
    @Column(name = "idtype", nullable = false)
    @NotNull
    @Override
    public String getIdtype() {
        return (String) get(11);
    }

    /**
     * Setter for <code>public.person.identifieralgorithm</code>.
     */
    @Override
    public PersonRecord setIdentifieralgorithm(Integer value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>public.person.identifieralgorithm</code>.
     */
    @Column(name = "identifieralgorithm", nullable = false)
    @NotNull
    @Override
    public Integer getIdentifieralgorithm() {
        return (Integer) get(12);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record13 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, String, String, String, String, LocalDate, String, String, String, String, String, String, Integer> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    @Override
    public Row13<Integer, String, String, String, String, LocalDate, String, String, String, String, String, String, Integer> valuesRow() {
        return (Row13) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Person.PERSON.ID;
    }

    @Override
    public Field<String> field2() {
        return Person.PERSON.FIRSTNAME;
    }

    @Override
    public Field<String> field3() {
        return Person.PERSON.LASTNAME;
    }

    @Override
    public Field<String> field4() {
        return Person.PERSON.BIRTHNAME;
    }

    @Override
    public Field<String> field5() {
        return Person.PERSON.ADMINISTRATIVEGENDER;
    }

    @Override
    public Field<LocalDate> field6() {
        return Person.PERSON.DATEOFBIRTH;
    }

    @Override
    public Field<String> field7() {
        return Person.PERSON.STREET;
    }

    @Override
    public Field<String> field8() {
        return Person.PERSON.POSTALCODE;
    }

    @Override
    public Field<String> field9() {
        return Person.PERSON.CITY;
    }

    @Override
    public Field<String> field10() {
        return Person.PERSON.COUNTRY;
    }

    @Override
    public Field<String> field11() {
        return Person.PERSON.IDENTIFIER;
    }

    @Override
    public Field<String> field12() {
        return Person.PERSON.IDTYPE;
    }

    @Override
    public Field<Integer> field13() {
        return Person.PERSON.IDENTIFIERALGORITHM;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getFirstname();
    }

    @Override
    public String component3() {
        return getLastname();
    }

    @Override
    public String component4() {
        return getBirthname();
    }

    @Override
    public String component5() {
        return getAdministrativegender();
    }

    @Override
    public LocalDate component6() {
        return getDateofbirth();
    }

    @Override
    public String component7() {
        return getStreet();
    }

    @Override
    public String component8() {
        return getPostalcode();
    }

    @Override
    public String component9() {
        return getCity();
    }

    @Override
    public String component10() {
        return getCountry();
    }

    @Override
    public String component11() {
        return getIdentifier();
    }

    @Override
    public String component12() {
        return getIdtype();
    }

    @Override
    public Integer component13() {
        return getIdentifieralgorithm();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getFirstname();
    }

    @Override
    public String value3() {
        return getLastname();
    }

    @Override
    public String value4() {
        return getBirthname();
    }

    @Override
    public String value5() {
        return getAdministrativegender();
    }

    @Override
    public LocalDate value6() {
        return getDateofbirth();
    }

    @Override
    public String value7() {
        return getStreet();
    }

    @Override
    public String value8() {
        return getPostalcode();
    }

    @Override
    public String value9() {
        return getCity();
    }

    @Override
    public String value10() {
        return getCountry();
    }

    @Override
    public String value11() {
        return getIdentifier();
    }

    @Override
    public String value12() {
        return getIdtype();
    }

    @Override
    public Integer value13() {
        return getIdentifieralgorithm();
    }

    @Override
    public PersonRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public PersonRecord value2(String value) {
        setFirstname(value);
        return this;
    }

    @Override
    public PersonRecord value3(String value) {
        setLastname(value);
        return this;
    }

    @Override
    public PersonRecord value4(String value) {
        setBirthname(value);
        return this;
    }

    @Override
    public PersonRecord value5(String value) {
        setAdministrativegender(value);
        return this;
    }

    @Override
    public PersonRecord value6(LocalDate value) {
        setDateofbirth(value);
        return this;
    }

    @Override
    public PersonRecord value7(String value) {
        setStreet(value);
        return this;
    }

    @Override
    public PersonRecord value8(String value) {
        setPostalcode(value);
        return this;
    }

    @Override
    public PersonRecord value9(String value) {
        setCity(value);
        return this;
    }

    @Override
    public PersonRecord value10(String value) {
        setCountry(value);
        return this;
    }

    @Override
    public PersonRecord value11(String value) {
        setIdentifier(value);
        return this;
    }

    @Override
    public PersonRecord value12(String value) {
        setIdtype(value);
        return this;
    }

    @Override
    public PersonRecord value13(Integer value) {
        setIdentifieralgorithm(value);
        return this;
    }

    @Override
    public PersonRecord values(Integer value1, String value2, String value3, String value4, String value5, LocalDate value6, String value7, String value8, String value9, String value10, String value11, String value12, Integer value13) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IPerson from) {
        setId(from.getId());
        setFirstname(from.getFirstname());
        setLastname(from.getLastname());
        setBirthname(from.getBirthname());
        setAdministrativegender(from.getAdministrativegender());
        setDateofbirth(from.getDateofbirth());
        setStreet(from.getStreet());
        setPostalcode(from.getPostalcode());
        setCity(from.getCity());
        setCountry(from.getCountry());
        setIdentifier(from.getIdentifier());
        setIdtype(from.getIdtype());
        setIdentifieralgorithm(from.getIdentifieralgorithm());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IPerson> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PersonRecord
     */
    public PersonRecord() {
        super(Person.PERSON);
    }

    /**
     * Create a detached, initialised PersonRecord
     */
    public PersonRecord(Integer id, String firstname, String lastname, String birthname, String administrativegender, LocalDate dateofbirth, String street, String postalcode, String city, String country, String identifier, String idtype, Integer identifieralgorithm) {
        super(Person.PERSON);

        setId(id);
        setFirstname(firstname);
        setLastname(lastname);
        setBirthname(birthname);
        setAdministrativegender(administrativegender);
        setDateofbirth(dateofbirth);
        setStreet(street);
        setPostalcode(postalcode);
        setCity(city);
        setCountry(country);
        setIdentifier(identifier);
        setIdtype(idtype);
        setIdentifieralgorithm(identifieralgorithm);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised PersonRecord
     */
    public PersonRecord(org.trustdeck.jooq.generated.tables.pojos.Person value) {
        super(Person.PERSON);

        if (value != null) {
            setId(value.getId());
            setFirstname(value.getFirstname());
            setLastname(value.getLastname());
            setBirthname(value.getBirthname());
            setAdministrativegender(value.getAdministrativegender());
            setDateofbirth(value.getDateofbirth());
            setStreet(value.getStreet());
            setPostalcode(value.getPostalcode());
            setCity(value.getCity());
            setCountry(value.getCountry());
            setIdentifier(value.getIdentifier());
            setIdtype(value.getIdtype());
            setIdentifieralgorithm(value.getIdentifieralgorithm());
            resetChangedOnNotNull();
        }
    }
}
