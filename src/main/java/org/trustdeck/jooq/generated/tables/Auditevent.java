/*
 * This file is generated by jOOQ.
 */
package org.trustdeck.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.trustdeck.jooq.generated.Indexes;
import org.trustdeck.jooq.generated.Keys;
import org.trustdeck.jooq.generated.Public;
import org.trustdeck.jooq.generated.tables.records.AuditeventRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Auditevent extends TableImpl<AuditeventRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.auditevent</code>
     */
    public static final Auditevent AUDITEVENT = new Auditevent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditeventRecord> getRecordType() {
        return AuditeventRecord.class;
    }

    /**
     * The column <code>public.auditevent.id</code>.
     */
    public final TableField<AuditeventRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.auditevent.requesttime</code>.
     */
    public final TableField<AuditeventRecord, LocalDateTime> REQUESTTIME = createField(DSL.name("requesttime"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.auditevent.username</code>.
     */
    public final TableField<AuditeventRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.auditevent.requesterip</code>.
     */
    public final TableField<AuditeventRecord, String> REQUESTERIP = createField(DSL.name("requesterip"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.auditevent.requesturl</code>.
     */
    public final TableField<AuditeventRecord, String> REQUESTURL = createField(DSL.name("requesturl"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.auditevent.requestbody</code>.
     */
    public final TableField<AuditeventRecord, String> REQUESTBODY = createField(DSL.name("requestbody"), SQLDataType.CLOB, this, "");

    private Auditevent(Name alias, Table<AuditeventRecord> aliased) {
        this(alias, aliased, null);
    }

    private Auditevent(Name alias, Table<AuditeventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.auditevent</code> table reference
     */
    public Auditevent(String alias) {
        this(DSL.name(alias), AUDITEVENT);
    }

    /**
     * Create an aliased <code>public.auditevent</code> table reference
     */
    public Auditevent(Name alias) {
        this(alias, AUDITEVENT);
    }

    /**
     * Create a <code>public.auditevent</code> table reference
     */
    public Auditevent() {
        this(DSL.name("auditevent"), null);
    }

    public <O extends Record> Auditevent(Table<O> child, ForeignKey<O, AuditeventRecord> key) {
        super(child, key, AUDITEVENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.AUDITUSERNAMEIDX);
    }

    @Override
    public Identity<AuditeventRecord, Long> getIdentity() {
        return (Identity<AuditeventRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuditeventRecord> getPrimaryKey() {
        return Keys.AUDITEVENT_PKEY;
    }

    @Override
    public Auditevent as(String alias) {
        return new Auditevent(DSL.name(alias), this);
    }

    @Override
    public Auditevent as(Name alias) {
        return new Auditevent(alias, this);
    }

    @Override
    public Auditevent as(Table<?> alias) {
        return new Auditevent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Auditevent rename(String name) {
        return new Auditevent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Auditevent rename(Name name) {
        return new Auditevent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Auditevent rename(Table<?> name) {
        return new Auditevent(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, LocalDateTime, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
