/*
 * This file is generated by jOOQ.
 */
package org.trustdeck.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.trustdeck.jooq.generated.Indexes;
import org.trustdeck.jooq.generated.Keys;
import org.trustdeck.jooq.generated.Public;
import org.trustdeck.jooq.generated.tables.records.AlgorithmRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Algorithm extends TableImpl<AlgorithmRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.algorithm</code>
     */
    public static final Algorithm ALGORITHM = new Algorithm();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlgorithmRecord> getRecordType() {
        return AlgorithmRecord.class;
    }

    /**
     * The column <code>public.algorithm.id</code>.
     */
    public final TableField<AlgorithmRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.algorithm.name</code>.
     */
    public final TableField<AlgorithmRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.algorithm.alphabet</code>.
     */
    public final TableField<AlgorithmRecord, String> ALPHABET = createField(DSL.name("alphabet"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.algorithm.randomalgorithmdesiredsize</code>.
     */
    public final TableField<AlgorithmRecord, Long> RANDOMALGORITHMDESIREDSIZE = createField(DSL.name("randomalgorithmdesiredsize"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>public.algorithm.randomalgorithmdesiredsuccessprobability</code>.
     */
    public final TableField<AlgorithmRecord, Double> RANDOMALGORITHMDESIREDSUCCESSPROBABILITY = createField(DSL.name("randomalgorithmdesiredsuccessprobability"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.algorithm.consecutivevaluecounter</code>.
     */
    public final TableField<AlgorithmRecord, Long> CONSECUTIVEVALUECOUNTER = createField(DSL.name("consecutivevaluecounter"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.algorithm.pseudonymlength</code>.
     */
    public final TableField<AlgorithmRecord, Integer> PSEUDONYMLENGTH = createField(DSL.name("pseudonymlength"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.algorithm.paddingcharacter</code>.
     */
    public final TableField<AlgorithmRecord, String> PADDINGCHARACTER = createField(DSL.name("paddingcharacter"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>public.algorithm.addcheckdigit</code>.
     */
    public final TableField<AlgorithmRecord, Boolean> ADDCHECKDIGIT = createField(DSL.name("addcheckdigit"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.algorithm.lengthincludescheckdigit</code>.
     */
    public final TableField<AlgorithmRecord, Boolean> LENGTHINCLUDESCHECKDIGIT = createField(DSL.name("lengthincludescheckdigit"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.algorithm.salt</code>.
     */
    public final TableField<AlgorithmRecord, String> SALT = createField(DSL.name("salt"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.algorithm.saltlength</code>.
     */
    public final TableField<AlgorithmRecord, Integer> SALTLENGTH = createField(DSL.name("saltlength"), SQLDataType.INTEGER.nullable(false), this, "");

    private Algorithm(Name alias, Table<AlgorithmRecord> aliased) {
        this(alias, aliased, null);
    }

    private Algorithm(Name alias, Table<AlgorithmRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.algorithm</code> table reference
     */
    public Algorithm(String alias) {
        this(DSL.name(alias), ALGORITHM);
    }

    /**
     * Create an aliased <code>public.algorithm</code> table reference
     */
    public Algorithm(Name alias) {
        this(alias, ALGORITHM);
    }

    /**
     * Create a <code>public.algorithm</code> table reference
     */
    public Algorithm() {
        this(DSL.name("algorithm"), null);
    }

    public <O extends Record> Algorithm(Table<O> child, ForeignKey<O, AlgorithmRecord> key) {
        super(child, key, ALGORITHM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ALGORITHM_NAME_UINDEX);
    }

    @Override
    public Identity<AlgorithmRecord, Integer> getIdentity() {
        return (Identity<AlgorithmRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AlgorithmRecord> getPrimaryKey() {
        return Keys.ALGORITHM_PKEY;
    }

    @Override
    public List<UniqueKey<AlgorithmRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ALGORITHM_NAME_ALPHABET_RANDOMALGORITHMDESIREDSIZE_RANDOMAL_KEY);
    }

    @Override
    public Algorithm as(String alias) {
        return new Algorithm(DSL.name(alias), this);
    }

    @Override
    public Algorithm as(Name alias) {
        return new Algorithm(alias, this);
    }

    @Override
    public Algorithm as(Table<?> alias) {
        return new Algorithm(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Algorithm rename(String name) {
        return new Algorithm(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Algorithm rename(Name name) {
        return new Algorithm(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Algorithm rename(Table<?> name) {
        return new Algorithm(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, String, String, Long, Double, Long, Integer, String, Boolean, Boolean, String, Integer> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super Integer, ? super String, ? super String, ? super Long, ? super Double, ? super Long, ? super Integer, ? super String, ? super Boolean, ? super Boolean, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super Integer, ? super String, ? super String, ? super Long, ? super Double, ? super Long, ? super Integer, ? super String, ? super Boolean, ? super Boolean, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
