/*
 * This file is generated by jOOQ.
 */
package org.trustdeck.jooq.generated.tables.records;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Index;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.trustdeck.jooq.generated.tables.Domain;
import org.trustdeck.jooq.generated.tables.interfaces.IDomain;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "domain",
    schema = "public",
    uniqueConstraints = {
        @UniqueConstraint(name = "domain_name_key", columnNames = { "name" })
    },
    indexes = {
        @Index(name = "metadataidx", unique = true, columnList = "name ASC")
    }
)
public class DomainRecord extends UpdatableRecordImpl<DomainRecord> implements IDomain {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.domain.id</code>.
     */
    @Override
    public DomainRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    @Override
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.domain.name</code>.
     */
    @Override
    public DomainRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.name</code>.
     */
    @Column(name = "name", nullable = false)
    @NotNull
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.domain.prefix</code>.
     */
    @Override
    public DomainRecord setPrefix(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.prefix</code>.
     */
    @Column(name = "prefix", nullable = false)
    @NotNull
    @Override
    public String getPrefix() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.domain.validfrom</code>.
     */
    @Override
    public DomainRecord setValidfrom(LocalDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.validfrom</code>.
     */
    @Column(name = "validfrom", nullable = false, precision = 6)
    @NotNull
    @Override
    public LocalDateTime getValidfrom() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>public.domain.validfrominherited</code>.
     */
    @Override
    public DomainRecord setValidfrominherited(Boolean value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.validfrominherited</code>.
     */
    @Column(name = "validfrominherited", nullable = false)
    @NotNull
    @Override
    public Boolean getValidfrominherited() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>public.domain.validto</code>.
     */
    @Override
    public DomainRecord setValidto(LocalDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.validto</code>.
     */
    @Column(name = "validto", nullable = false, precision = 6)
    @NotNull
    @Override
    public LocalDateTime getValidto() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>public.domain.validtoinherited</code>.
     */
    @Override
    public DomainRecord setValidtoinherited(Boolean value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.validtoinherited</code>.
     */
    @Column(name = "validtoinherited", nullable = false)
    @NotNull
    @Override
    public Boolean getValidtoinherited() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>public.domain.enforcestartdatevalidity</code>.
     */
    @Override
    public DomainRecord setEnforcestartdatevalidity(Boolean value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.enforcestartdatevalidity</code>.
     */
    @Column(name = "enforcestartdatevalidity", nullable = false)
    @NotNull
    @Override
    public Boolean getEnforcestartdatevalidity() {
        return (Boolean) get(7);
    }

    /**
     * Setter for <code>public.domain.enforcestartdatevalidityinherited</code>.
     */
    @Override
    public DomainRecord setEnforcestartdatevalidityinherited(Boolean value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.enforcestartdatevalidityinherited</code>.
     */
    @Column(name = "enforcestartdatevalidityinherited", nullable = false)
    @NotNull
    @Override
    public Boolean getEnforcestartdatevalidityinherited() {
        return (Boolean) get(8);
    }

    /**
     * Setter for <code>public.domain.enforceenddatevalidity</code>.
     */
    @Override
    public DomainRecord setEnforceenddatevalidity(Boolean value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.enforceenddatevalidity</code>.
     */
    @Column(name = "enforceenddatevalidity", nullable = false)
    @NotNull
    @Override
    public Boolean getEnforceenddatevalidity() {
        return (Boolean) get(9);
    }

    /**
     * Setter for <code>public.domain.enforceenddatevalidityinherited</code>.
     */
    @Override
    public DomainRecord setEnforceenddatevalidityinherited(Boolean value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.enforceenddatevalidityinherited</code>.
     */
    @Column(name = "enforceenddatevalidityinherited", nullable = false)
    @NotNull
    @Override
    public Boolean getEnforceenddatevalidityinherited() {
        return (Boolean) get(10);
    }

    /**
     * Setter for <code>public.domain.algorithm</code>.
     */
    @Override
    public DomainRecord setAlgorithm(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.algorithm</code>.
     */
    @Column(name = "algorithm", nullable = false)
    @NotNull
    @Override
    public String getAlgorithm() {
        return (String) get(11);
    }

    /**
     * Setter for <code>public.domain.algorithminherited</code>.
     */
    @Override
    public DomainRecord setAlgorithminherited(Boolean value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.algorithminherited</code>.
     */
    @Column(name = "algorithminherited", nullable = false)
    @NotNull
    @Override
    public Boolean getAlgorithminherited() {
        return (Boolean) get(12);
    }

    /**
     * Setter for <code>public.domain.alphabet</code>.
     */
    @Override
    public DomainRecord setAlphabet(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.alphabet</code>.
     */
    @Column(name = "alphabet", nullable = false)
    @NotNull
    @Override
    public String getAlphabet() {
        return (String) get(13);
    }

    /**
     * Setter for <code>public.domain.alphabetinherited</code>.
     */
    @Override
    public DomainRecord setAlphabetinherited(Boolean value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.alphabetinherited</code>.
     */
    @Column(name = "alphabetinherited", nullable = false)
    @NotNull
    @Override
    public Boolean getAlphabetinherited() {
        return (Boolean) get(14);
    }

    /**
     * Setter for <code>public.domain.randomalgorithmdesiredsize</code>.
     */
    @Override
    public DomainRecord setRandomalgorithmdesiredsize(Long value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.randomalgorithmdesiredsize</code>.
     */
    @Column(name = "randomalgorithmdesiredsize", nullable = false)
    @NotNull
    @Override
    public Long getRandomalgorithmdesiredsize() {
        return (Long) get(15);
    }

    /**
     * Setter for
     * <code>public.domain.randomalgorithmdesiredsizeinherited</code>.
     */
    @Override
    public DomainRecord setRandomalgorithmdesiredsizeinherited(Boolean value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.domain.randomalgorithmdesiredsizeinherited</code>.
     */
    @Column(name = "randomalgorithmdesiredsizeinherited", nullable = false)
    @NotNull
    @Override
    public Boolean getRandomalgorithmdesiredsizeinherited() {
        return (Boolean) get(16);
    }

    /**
     * Setter for
     * <code>public.domain.randomalgorithmdesiredsuccessprobability</code>.
     */
    @Override
    public DomainRecord setRandomalgorithmdesiredsuccessprobability(Double value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.domain.randomalgorithmdesiredsuccessprobability</code>.
     */
    @Column(name = "randomalgorithmdesiredsuccessprobability", nullable = false)
    @NotNull
    @Override
    public Double getRandomalgorithmdesiredsuccessprobability() {
        return (Double) get(17);
    }

    /**
     * Setter for
     * <code>public.domain.randomalgorithmdesiredsuccessprobabilityinherited</code>.
     */
    @Override
    public DomainRecord setRandomalgorithmdesiredsuccessprobabilityinherited(Boolean value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.domain.randomalgorithmdesiredsuccessprobabilityinherited</code>.
     */
    @Column(name = "randomalgorithmdesiredsuccessprobabilityinherited", nullable = false)
    @NotNull
    @Override
    public Boolean getRandomalgorithmdesiredsuccessprobabilityinherited() {
        return (Boolean) get(18);
    }

    /**
     * Setter for <code>public.domain.multiplepsnallowed</code>.
     */
    @Override
    public DomainRecord setMultiplepsnallowed(Boolean value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.multiplepsnallowed</code>.
     */
    @Column(name = "multiplepsnallowed", nullable = false)
    @NotNull
    @Override
    public Boolean getMultiplepsnallowed() {
        return (Boolean) get(19);
    }

    /**
     * Setter for <code>public.domain.multiplepsnallowedinherited</code>.
     */
    @Override
    public DomainRecord setMultiplepsnallowedinherited(Boolean value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.multiplepsnallowedinherited</code>.
     */
    @Column(name = "multiplepsnallowedinherited", nullable = false)
    @NotNull
    @Override
    public Boolean getMultiplepsnallowedinherited() {
        return (Boolean) get(20);
    }

    /**
     * Setter for <code>public.domain.consecutivevaluecounter</code>.
     */
    @Override
    public DomainRecord setConsecutivevaluecounter(Long value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.consecutivevaluecounter</code>.
     */
    @Column(name = "consecutivevaluecounter", nullable = false)
    @NotNull
    @Override
    public Long getConsecutivevaluecounter() {
        return (Long) get(21);
    }

    /**
     * Setter for <code>public.domain.pseudonymlength</code>.
     */
    @Override
    public DomainRecord setPseudonymlength(Integer value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.pseudonymlength</code>.
     */
    @Column(name = "pseudonymlength", nullable = false)
    @NotNull
    @Override
    public Integer getPseudonymlength() {
        return (Integer) get(22);
    }

    /**
     * Setter for <code>public.domain.pseudonymlengthinherited</code>.
     */
    @Override
    public DomainRecord setPseudonymlengthinherited(Boolean value) {
        set(23, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.pseudonymlengthinherited</code>.
     */
    @Column(name = "pseudonymlengthinherited", nullable = false)
    @NotNull
    @Override
    public Boolean getPseudonymlengthinherited() {
        return (Boolean) get(23);
    }

    /**
     * Setter for <code>public.domain.paddingcharacter</code>.
     */
    @Override
    public DomainRecord setPaddingcharacter(String value) {
        set(24, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.paddingcharacter</code>.
     */
    @Column(name = "paddingcharacter", nullable = false, length = 1)
    @NotNull
    @Size(max = 1)
    @Override
    public String getPaddingcharacter() {
        return (String) get(24);
    }

    /**
     * Setter for <code>public.domain.paddingcharacterinherited</code>.
     */
    @Override
    public DomainRecord setPaddingcharacterinherited(Boolean value) {
        set(25, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.paddingcharacterinherited</code>.
     */
    @Column(name = "paddingcharacterinherited", nullable = false)
    @NotNull
    @Override
    public Boolean getPaddingcharacterinherited() {
        return (Boolean) get(25);
    }

    /**
     * Setter for <code>public.domain.addcheckdigit</code>.
     */
    @Override
    public DomainRecord setAddcheckdigit(Boolean value) {
        set(26, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.addcheckdigit</code>.
     */
    @Column(name = "addcheckdigit", nullable = false)
    @NotNull
    @Override
    public Boolean getAddcheckdigit() {
        return (Boolean) get(26);
    }

    /**
     * Setter for <code>public.domain.addcheckdigitinherited</code>.
     */
    @Override
    public DomainRecord setAddcheckdigitinherited(Boolean value) {
        set(27, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.addcheckdigitinherited</code>.
     */
    @Column(name = "addcheckdigitinherited", nullable = false)
    @NotNull
    @Override
    public Boolean getAddcheckdigitinherited() {
        return (Boolean) get(27);
    }

    /**
     * Setter for <code>public.domain.lengthincludescheckdigit</code>.
     */
    @Override
    public DomainRecord setLengthincludescheckdigit(Boolean value) {
        set(28, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.lengthincludescheckdigit</code>.
     */
    @Column(name = "lengthincludescheckdigit", nullable = false)
    @NotNull
    @Override
    public Boolean getLengthincludescheckdigit() {
        return (Boolean) get(28);
    }

    /**
     * Setter for <code>public.domain.lengthincludescheckdigitinherited</code>.
     */
    @Override
    public DomainRecord setLengthincludescheckdigitinherited(Boolean value) {
        set(29, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.lengthincludescheckdigitinherited</code>.
     */
    @Column(name = "lengthincludescheckdigitinherited", nullable = false)
    @NotNull
    @Override
    public Boolean getLengthincludescheckdigitinherited() {
        return (Boolean) get(29);
    }

    /**
     * Setter for <code>public.domain.salt</code>.
     */
    @Override
    public DomainRecord setSalt(String value) {
        set(30, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.salt</code>.
     */
    @Column(name = "salt", nullable = false)
    @NotNull
    @Override
    public String getSalt() {
        return (String) get(30);
    }

    /**
     * Setter for <code>public.domain.saltlength</code>.
     */
    @Override
    public DomainRecord setSaltlength(Integer value) {
        set(31, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.saltlength</code>.
     */
    @Column(name = "saltlength", nullable = false)
    @NotNull
    @Override
    public Integer getSaltlength() {
        return (Integer) get(31);
    }

    /**
     * Setter for <code>public.domain.description</code>.
     */
    @Override
    public DomainRecord setDescription(String value) {
        set(32, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.description</code>.
     */
    @Column(name = "description")
    @Override
    public String getDescription() {
        return (String) get(32);
    }

    /**
     * Setter for <code>public.domain.superdomainid</code>.
     */
    @Override
    public DomainRecord setSuperdomainid(Integer value) {
        set(33, value);
        return this;
    }

    /**
     * Getter for <code>public.domain.superdomainid</code>.
     */
    @Column(name = "superdomainid")
    @Override
    public Integer getSuperdomainid() {
        return (Integer) get(33);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IDomain from) {
        setId(from.getId());
        setName(from.getName());
        setPrefix(from.getPrefix());
        setValidfrom(from.getValidfrom());
        setValidfrominherited(from.getValidfrominherited());
        setValidto(from.getValidto());
        setValidtoinherited(from.getValidtoinherited());
        setEnforcestartdatevalidity(from.getEnforcestartdatevalidity());
        setEnforcestartdatevalidityinherited(from.getEnforcestartdatevalidityinherited());
        setEnforceenddatevalidity(from.getEnforceenddatevalidity());
        setEnforceenddatevalidityinherited(from.getEnforceenddatevalidityinherited());
        setAlgorithm(from.getAlgorithm());
        setAlgorithminherited(from.getAlgorithminherited());
        setAlphabet(from.getAlphabet());
        setAlphabetinherited(from.getAlphabetinherited());
        setRandomalgorithmdesiredsize(from.getRandomalgorithmdesiredsize());
        setRandomalgorithmdesiredsizeinherited(from.getRandomalgorithmdesiredsizeinherited());
        setRandomalgorithmdesiredsuccessprobability(from.getRandomalgorithmdesiredsuccessprobability());
        setRandomalgorithmdesiredsuccessprobabilityinherited(from.getRandomalgorithmdesiredsuccessprobabilityinherited());
        setMultiplepsnallowed(from.getMultiplepsnallowed());
        setMultiplepsnallowedinherited(from.getMultiplepsnallowedinherited());
        setConsecutivevaluecounter(from.getConsecutivevaluecounter());
        setPseudonymlength(from.getPseudonymlength());
        setPseudonymlengthinherited(from.getPseudonymlengthinherited());
        setPaddingcharacter(from.getPaddingcharacter());
        setPaddingcharacterinherited(from.getPaddingcharacterinherited());
        setAddcheckdigit(from.getAddcheckdigit());
        setAddcheckdigitinherited(from.getAddcheckdigitinherited());
        setLengthincludescheckdigit(from.getLengthincludescheckdigit());
        setLengthincludescheckdigitinherited(from.getLengthincludescheckdigitinherited());
        setSalt(from.getSalt());
        setSaltlength(from.getSaltlength());
        setDescription(from.getDescription());
        setSuperdomainid(from.getSuperdomainid());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IDomain> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DomainRecord
     */
    public DomainRecord() {
        super(Domain.DOMAIN);
    }

    /**
     * Create a detached, initialised DomainRecord
     */
    public DomainRecord(Integer id, String name, String prefix, LocalDateTime validfrom, Boolean validfrominherited, LocalDateTime validto, Boolean validtoinherited, Boolean enforcestartdatevalidity, Boolean enforcestartdatevalidityinherited, Boolean enforceenddatevalidity, Boolean enforceenddatevalidityinherited, String algorithm, Boolean algorithminherited, String alphabet, Boolean alphabetinherited, Long randomalgorithmdesiredsize, Boolean randomalgorithmdesiredsizeinherited, Double randomalgorithmdesiredsuccessprobability, Boolean randomalgorithmdesiredsuccessprobabilityinherited, Boolean multiplepsnallowed, Boolean multiplepsnallowedinherited, Long consecutivevaluecounter, Integer pseudonymlength, Boolean pseudonymlengthinherited, String paddingcharacter, Boolean paddingcharacterinherited, Boolean addcheckdigit, Boolean addcheckdigitinherited, Boolean lengthincludescheckdigit, Boolean lengthincludescheckdigitinherited, String salt, Integer saltlength, String description, Integer superdomainid) {
        super(Domain.DOMAIN);

        setId(id);
        setName(name);
        setPrefix(prefix);
        setValidfrom(validfrom);
        setValidfrominherited(validfrominherited);
        setValidto(validto);
        setValidtoinherited(validtoinherited);
        setEnforcestartdatevalidity(enforcestartdatevalidity);
        setEnforcestartdatevalidityinherited(enforcestartdatevalidityinherited);
        setEnforceenddatevalidity(enforceenddatevalidity);
        setEnforceenddatevalidityinherited(enforceenddatevalidityinherited);
        setAlgorithm(algorithm);
        setAlgorithminherited(algorithminherited);
        setAlphabet(alphabet);
        setAlphabetinherited(alphabetinherited);
        setRandomalgorithmdesiredsize(randomalgorithmdesiredsize);
        setRandomalgorithmdesiredsizeinherited(randomalgorithmdesiredsizeinherited);
        setRandomalgorithmdesiredsuccessprobability(randomalgorithmdesiredsuccessprobability);
        setRandomalgorithmdesiredsuccessprobabilityinherited(randomalgorithmdesiredsuccessprobabilityinherited);
        setMultiplepsnallowed(multiplepsnallowed);
        setMultiplepsnallowedinherited(multiplepsnallowedinherited);
        setConsecutivevaluecounter(consecutivevaluecounter);
        setPseudonymlength(pseudonymlength);
        setPseudonymlengthinherited(pseudonymlengthinherited);
        setPaddingcharacter(paddingcharacter);
        setPaddingcharacterinherited(paddingcharacterinherited);
        setAddcheckdigit(addcheckdigit);
        setAddcheckdigitinherited(addcheckdigitinherited);
        setLengthincludescheckdigit(lengthincludescheckdigit);
        setLengthincludescheckdigitinherited(lengthincludescheckdigitinherited);
        setSalt(salt);
        setSaltlength(saltlength);
        setDescription(description);
        setSuperdomainid(superdomainid);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised DomainRecord
     */
    public DomainRecord(org.trustdeck.jooq.generated.tables.pojos.Domain value) {
        super(Domain.DOMAIN);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setPrefix(value.getPrefix());
            setValidfrom(value.getValidfrom());
            setValidfrominherited(value.getValidfrominherited());
            setValidto(value.getValidto());
            setValidtoinherited(value.getValidtoinherited());
            setEnforcestartdatevalidity(value.getEnforcestartdatevalidity());
            setEnforcestartdatevalidityinherited(value.getEnforcestartdatevalidityinherited());
            setEnforceenddatevalidity(value.getEnforceenddatevalidity());
            setEnforceenddatevalidityinherited(value.getEnforceenddatevalidityinherited());
            setAlgorithm(value.getAlgorithm());
            setAlgorithminherited(value.getAlgorithminherited());
            setAlphabet(value.getAlphabet());
            setAlphabetinherited(value.getAlphabetinherited());
            setRandomalgorithmdesiredsize(value.getRandomalgorithmdesiredsize());
            setRandomalgorithmdesiredsizeinherited(value.getRandomalgorithmdesiredsizeinherited());
            setRandomalgorithmdesiredsuccessprobability(value.getRandomalgorithmdesiredsuccessprobability());
            setRandomalgorithmdesiredsuccessprobabilityinherited(value.getRandomalgorithmdesiredsuccessprobabilityinherited());
            setMultiplepsnallowed(value.getMultiplepsnallowed());
            setMultiplepsnallowedinherited(value.getMultiplepsnallowedinherited());
            setConsecutivevaluecounter(value.getConsecutivevaluecounter());
            setPseudonymlength(value.getPseudonymlength());
            setPseudonymlengthinherited(value.getPseudonymlengthinherited());
            setPaddingcharacter(value.getPaddingcharacter());
            setPaddingcharacterinherited(value.getPaddingcharacterinherited());
            setAddcheckdigit(value.getAddcheckdigit());
            setAddcheckdigitinherited(value.getAddcheckdigitinherited());
            setLengthincludescheckdigit(value.getLengthincludescheckdigit());
            setLengthincludescheckdigitinherited(value.getLengthincludescheckdigitinherited());
            setSalt(value.getSalt());
            setSaltlength(value.getSaltlength());
            setDescription(value.getDescription());
            setSuperdomainid(value.getSuperdomainid());
            resetChangedOnNotNull();
        }
    }
}
