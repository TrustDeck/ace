/*
 * This file is generated by jOOQ.
 */
package org.trustdeck.jooq.generated.tables.records;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Index;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;
import org.trustdeck.jooq.generated.tables.Auditevent;
import org.trustdeck.jooq.generated.tables.interfaces.IAuditevent;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "auditevent",
    schema = "public",
    indexes = {
        @Index(name = "auditusernameidx", columnList = "username ASC")
    }
)
public class AuditeventRecord extends UpdatableRecordImpl<AuditeventRecord> implements Record6<Long, LocalDateTime, String, String, String, String>, IAuditevent {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.auditevent.id</code>.
     */
    @Override
    public AuditeventRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.auditevent.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.auditevent.requesttime</code>.
     */
    @Override
    public AuditeventRecord setRequesttime(LocalDateTime value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.auditevent.requesttime</code>.
     */
    @Column(name = "requesttime", nullable = false, precision = 6)
    @NotNull
    @Override
    public LocalDateTime getRequesttime() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>public.auditevent.username</code>.
     */
    @Override
    public AuditeventRecord setUsername(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.auditevent.username</code>.
     */
    @Column(name = "username", nullable = false)
    @NotNull
    @Override
    public String getUsername() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.auditevent.requesterip</code>.
     */
    @Override
    public AuditeventRecord setRequesterip(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.auditevent.requesterip</code>.
     */
    @Column(name = "requesterip", nullable = false)
    @NotNull
    @Override
    public String getRequesterip() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.auditevent.requesturl</code>.
     */
    @Override
    public AuditeventRecord setRequesturl(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.auditevent.requesturl</code>.
     */
    @Column(name = "requesturl", nullable = false)
    @NotNull
    @Override
    public String getRequesturl() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.auditevent.requestbody</code>.
     */
    @Override
    public AuditeventRecord setRequestbody(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.auditevent.requestbody</code>.
     */
    @Column(name = "requestbody")
    @Override
    public String getRequestbody() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, LocalDateTime, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Long, LocalDateTime, String, String, String, String> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Auditevent.AUDITEVENT.ID;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return Auditevent.AUDITEVENT.REQUESTTIME;
    }

    @Override
    public Field<String> field3() {
        return Auditevent.AUDITEVENT.USERNAME;
    }

    @Override
    public Field<String> field4() {
        return Auditevent.AUDITEVENT.REQUESTERIP;
    }

    @Override
    public Field<String> field5() {
        return Auditevent.AUDITEVENT.REQUESTURL;
    }

    @Override
    public Field<String> field6() {
        return Auditevent.AUDITEVENT.REQUESTBODY;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public LocalDateTime component2() {
        return getRequesttime();
    }

    @Override
    public String component3() {
        return getUsername();
    }

    @Override
    public String component4() {
        return getRequesterip();
    }

    @Override
    public String component5() {
        return getRequesturl();
    }

    @Override
    public String component6() {
        return getRequestbody();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public LocalDateTime value2() {
        return getRequesttime();
    }

    @Override
    public String value3() {
        return getUsername();
    }

    @Override
    public String value4() {
        return getRequesterip();
    }

    @Override
    public String value5() {
        return getRequesturl();
    }

    @Override
    public String value6() {
        return getRequestbody();
    }

    @Override
    public AuditeventRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public AuditeventRecord value2(LocalDateTime value) {
        setRequesttime(value);
        return this;
    }

    @Override
    public AuditeventRecord value3(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public AuditeventRecord value4(String value) {
        setRequesterip(value);
        return this;
    }

    @Override
    public AuditeventRecord value5(String value) {
        setRequesturl(value);
        return this;
    }

    @Override
    public AuditeventRecord value6(String value) {
        setRequestbody(value);
        return this;
    }

    @Override
    public AuditeventRecord values(Long value1, LocalDateTime value2, String value3, String value4, String value5, String value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IAuditevent from) {
        setId(from.getId());
        setRequesttime(from.getRequesttime());
        setUsername(from.getUsername());
        setRequesterip(from.getRequesterip());
        setRequesturl(from.getRequesturl());
        setRequestbody(from.getRequestbody());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IAuditevent> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AuditeventRecord
     */
    public AuditeventRecord() {
        super(Auditevent.AUDITEVENT);
    }

    /**
     * Create a detached, initialised AuditeventRecord
     */
    public AuditeventRecord(Long id, LocalDateTime requesttime, String username, String requesterip, String requesturl, String requestbody) {
        super(Auditevent.AUDITEVENT);

        setId(id);
        setRequesttime(requesttime);
        setUsername(username);
        setRequesterip(requesterip);
        setRequesturl(requesturl);
        setRequestbody(requestbody);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised AuditeventRecord
     */
    public AuditeventRecord(org.trustdeck.jooq.generated.tables.pojos.Auditevent value) {
        super(Auditevent.AUDITEVENT);

        if (value != null) {
            setId(value.getId());
            setRequesttime(value.getRequesttime());
            setUsername(value.getUsername());
            setRequesterip(value.getRequesterip());
            setRequesturl(value.getRequesturl());
            setRequestbody(value.getRequestbody());
            resetChangedOnNotNull();
        }
    }
}
