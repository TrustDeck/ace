/*
 * This file is generated by jOOQ.
 */
package org.trustdeck.jooq.generated.tables.records;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Index;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record12;
import org.jooq.Row12;
import org.jooq.impl.UpdatableRecordImpl;
import org.trustdeck.jooq.generated.tables.Algorithm;
import org.trustdeck.jooq.generated.tables.interfaces.IAlgorithm;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "algorithm",
    schema = "public",
    uniqueConstraints = {
        @UniqueConstraint(name = "algorithm_name_alphabet_randomalgorithmdesiredsize_randomal_key", columnNames = { "name", "alphabet", "randomalgorithmdesiredsize", "randomalgorithmdesiredsuccessprobability", "pseudonymlength", "paddingcharacter", "addcheckdigit", "lengthincludescheckdigit" })
    },
    indexes = {
        @Index(name = "algorithm_name_uindex", columnList = "name ASC")
    }
)
public class AlgorithmRecord extends UpdatableRecordImpl<AlgorithmRecord> implements Record12<Integer, String, String, Long, Double, Long, Integer, String, Boolean, Boolean, String, Integer>, IAlgorithm {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.algorithm.id</code>.
     */
    @Override
    public AlgorithmRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.algorithm.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    @Override
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.algorithm.name</code>.
     */
    @Override
    public AlgorithmRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.algorithm.name</code>.
     */
    @Column(name = "name", nullable = false)
    @NotNull
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.algorithm.alphabet</code>.
     */
    @Override
    public AlgorithmRecord setAlphabet(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.algorithm.alphabet</code>.
     */
    @Column(name = "alphabet", nullable = false)
    @NotNull
    @Override
    public String getAlphabet() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.algorithm.randomalgorithmdesiredsize</code>.
     */
    @Override
    public AlgorithmRecord setRandomalgorithmdesiredsize(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.algorithm.randomalgorithmdesiredsize</code>.
     */
    @Column(name = "randomalgorithmdesiredsize", nullable = false)
    @NotNull
    @Override
    public Long getRandomalgorithmdesiredsize() {
        return (Long) get(3);
    }

    /**
     * Setter for
     * <code>public.algorithm.randomalgorithmdesiredsuccessprobability</code>.
     */
    @Override
    public AlgorithmRecord setRandomalgorithmdesiredsuccessprobability(Double value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.algorithm.randomalgorithmdesiredsuccessprobability</code>.
     */
    @Column(name = "randomalgorithmdesiredsuccessprobability", nullable = false)
    @NotNull
    @Override
    public Double getRandomalgorithmdesiredsuccessprobability() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>public.algorithm.consecutivevaluecounter</code>.
     */
    @Override
    public AlgorithmRecord setConsecutivevaluecounter(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.algorithm.consecutivevaluecounter</code>.
     */
    @Column(name = "consecutivevaluecounter", nullable = false)
    @NotNull
    @Override
    public Long getConsecutivevaluecounter() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>public.algorithm.pseudonymlength</code>.
     */
    @Override
    public AlgorithmRecord setPseudonymlength(Integer value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.algorithm.pseudonymlength</code>.
     */
    @Column(name = "pseudonymlength", nullable = false)
    @NotNull
    @Override
    public Integer getPseudonymlength() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>public.algorithm.paddingcharacter</code>.
     */
    @Override
    public AlgorithmRecord setPaddingcharacter(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.algorithm.paddingcharacter</code>.
     */
    @Column(name = "paddingcharacter", nullable = false, length = 1)
    @NotNull
    @Size(max = 1)
    @Override
    public String getPaddingcharacter() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.algorithm.addcheckdigit</code>.
     */
    @Override
    public AlgorithmRecord setAddcheckdigit(Boolean value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.algorithm.addcheckdigit</code>.
     */
    @Column(name = "addcheckdigit", nullable = false)
    @NotNull
    @Override
    public Boolean getAddcheckdigit() {
        return (Boolean) get(8);
    }

    /**
     * Setter for <code>public.algorithm.lengthincludescheckdigit</code>.
     */
    @Override
    public AlgorithmRecord setLengthincludescheckdigit(Boolean value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>public.algorithm.lengthincludescheckdigit</code>.
     */
    @Column(name = "lengthincludescheckdigit", nullable = false)
    @NotNull
    @Override
    public Boolean getLengthincludescheckdigit() {
        return (Boolean) get(9);
    }

    /**
     * Setter for <code>public.algorithm.salt</code>.
     */
    @Override
    public AlgorithmRecord setSalt(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>public.algorithm.salt</code>.
     */
    @Column(name = "salt", nullable = false)
    @NotNull
    @Override
    public String getSalt() {
        return (String) get(10);
    }

    /**
     * Setter for <code>public.algorithm.saltlength</code>.
     */
    @Override
    public AlgorithmRecord setSaltlength(Integer value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>public.algorithm.saltlength</code>.
     */
    @Column(name = "saltlength", nullable = false)
    @NotNull
    @Override
    public Integer getSaltlength() {
        return (Integer) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, String, String, Long, Double, Long, Integer, String, Boolean, Boolean, String, Integer> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    @Override
    public Row12<Integer, String, String, Long, Double, Long, Integer, String, Boolean, Boolean, String, Integer> valuesRow() {
        return (Row12) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Algorithm.ALGORITHM.ID;
    }

    @Override
    public Field<String> field2() {
        return Algorithm.ALGORITHM.NAME;
    }

    @Override
    public Field<String> field3() {
        return Algorithm.ALGORITHM.ALPHABET;
    }

    @Override
    public Field<Long> field4() {
        return Algorithm.ALGORITHM.RANDOMALGORITHMDESIREDSIZE;
    }

    @Override
    public Field<Double> field5() {
        return Algorithm.ALGORITHM.RANDOMALGORITHMDESIREDSUCCESSPROBABILITY;
    }

    @Override
    public Field<Long> field6() {
        return Algorithm.ALGORITHM.CONSECUTIVEVALUECOUNTER;
    }

    @Override
    public Field<Integer> field7() {
        return Algorithm.ALGORITHM.PSEUDONYMLENGTH;
    }

    @Override
    public Field<String> field8() {
        return Algorithm.ALGORITHM.PADDINGCHARACTER;
    }

    @Override
    public Field<Boolean> field9() {
        return Algorithm.ALGORITHM.ADDCHECKDIGIT;
    }

    @Override
    public Field<Boolean> field10() {
        return Algorithm.ALGORITHM.LENGTHINCLUDESCHECKDIGIT;
    }

    @Override
    public Field<String> field11() {
        return Algorithm.ALGORITHM.SALT;
    }

    @Override
    public Field<Integer> field12() {
        return Algorithm.ALGORITHM.SALTLENGTH;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getAlphabet();
    }

    @Override
    public Long component4() {
        return getRandomalgorithmdesiredsize();
    }

    @Override
    public Double component5() {
        return getRandomalgorithmdesiredsuccessprobability();
    }

    @Override
    public Long component6() {
        return getConsecutivevaluecounter();
    }

    @Override
    public Integer component7() {
        return getPseudonymlength();
    }

    @Override
    public String component8() {
        return getPaddingcharacter();
    }

    @Override
    public Boolean component9() {
        return getAddcheckdigit();
    }

    @Override
    public Boolean component10() {
        return getLengthincludescheckdigit();
    }

    @Override
    public String component11() {
        return getSalt();
    }

    @Override
    public Integer component12() {
        return getSaltlength();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getAlphabet();
    }

    @Override
    public Long value4() {
        return getRandomalgorithmdesiredsize();
    }

    @Override
    public Double value5() {
        return getRandomalgorithmdesiredsuccessprobability();
    }

    @Override
    public Long value6() {
        return getConsecutivevaluecounter();
    }

    @Override
    public Integer value7() {
        return getPseudonymlength();
    }

    @Override
    public String value8() {
        return getPaddingcharacter();
    }

    @Override
    public Boolean value9() {
        return getAddcheckdigit();
    }

    @Override
    public Boolean value10() {
        return getLengthincludescheckdigit();
    }

    @Override
    public String value11() {
        return getSalt();
    }

    @Override
    public Integer value12() {
        return getSaltlength();
    }

    @Override
    public AlgorithmRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public AlgorithmRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public AlgorithmRecord value3(String value) {
        setAlphabet(value);
        return this;
    }

    @Override
    public AlgorithmRecord value4(Long value) {
        setRandomalgorithmdesiredsize(value);
        return this;
    }

    @Override
    public AlgorithmRecord value5(Double value) {
        setRandomalgorithmdesiredsuccessprobability(value);
        return this;
    }

    @Override
    public AlgorithmRecord value6(Long value) {
        setConsecutivevaluecounter(value);
        return this;
    }

    @Override
    public AlgorithmRecord value7(Integer value) {
        setPseudonymlength(value);
        return this;
    }

    @Override
    public AlgorithmRecord value8(String value) {
        setPaddingcharacter(value);
        return this;
    }

    @Override
    public AlgorithmRecord value9(Boolean value) {
        setAddcheckdigit(value);
        return this;
    }

    @Override
    public AlgorithmRecord value10(Boolean value) {
        setLengthincludescheckdigit(value);
        return this;
    }

    @Override
    public AlgorithmRecord value11(String value) {
        setSalt(value);
        return this;
    }

    @Override
    public AlgorithmRecord value12(Integer value) {
        setSaltlength(value);
        return this;
    }

    @Override
    public AlgorithmRecord values(Integer value1, String value2, String value3, Long value4, Double value5, Long value6, Integer value7, String value8, Boolean value9, Boolean value10, String value11, Integer value12) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IAlgorithm from) {
        setId(from.getId());
        setName(from.getName());
        setAlphabet(from.getAlphabet());
        setRandomalgorithmdesiredsize(from.getRandomalgorithmdesiredsize());
        setRandomalgorithmdesiredsuccessprobability(from.getRandomalgorithmdesiredsuccessprobability());
        setConsecutivevaluecounter(from.getConsecutivevaluecounter());
        setPseudonymlength(from.getPseudonymlength());
        setPaddingcharacter(from.getPaddingcharacter());
        setAddcheckdigit(from.getAddcheckdigit());
        setLengthincludescheckdigit(from.getLengthincludescheckdigit());
        setSalt(from.getSalt());
        setSaltlength(from.getSaltlength());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IAlgorithm> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AlgorithmRecord
     */
    public AlgorithmRecord() {
        super(Algorithm.ALGORITHM);
    }

    /**
     * Create a detached, initialised AlgorithmRecord
     */
    public AlgorithmRecord(Integer id, String name, String alphabet, Long randomalgorithmdesiredsize, Double randomalgorithmdesiredsuccessprobability, Long consecutivevaluecounter, Integer pseudonymlength, String paddingcharacter, Boolean addcheckdigit, Boolean lengthincludescheckdigit, String salt, Integer saltlength) {
        super(Algorithm.ALGORITHM);

        setId(id);
        setName(name);
        setAlphabet(alphabet);
        setRandomalgorithmdesiredsize(randomalgorithmdesiredsize);
        setRandomalgorithmdesiredsuccessprobability(randomalgorithmdesiredsuccessprobability);
        setConsecutivevaluecounter(consecutivevaluecounter);
        setPseudonymlength(pseudonymlength);
        setPaddingcharacter(paddingcharacter);
        setAddcheckdigit(addcheckdigit);
        setLengthincludescheckdigit(lengthincludescheckdigit);
        setSalt(salt);
        setSaltlength(saltlength);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised AlgorithmRecord
     */
    public AlgorithmRecord(org.trustdeck.jooq.generated.tables.pojos.Algorithm value) {
        super(Algorithm.ALGORITHM);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setAlphabet(value.getAlphabet());
            setRandomalgorithmdesiredsize(value.getRandomalgorithmdesiredsize());
            setRandomalgorithmdesiredsuccessprobability(value.getRandomalgorithmdesiredsuccessprobability());
            setConsecutivevaluecounter(value.getConsecutivevaluecounter());
            setPseudonymlength(value.getPseudonymlength());
            setPaddingcharacter(value.getPaddingcharacter());
            setAddcheckdigit(value.getAddcheckdigit());
            setLengthincludescheckdigit(value.getLengthincludescheckdigit());
            setSalt(value.getSalt());
            setSaltlength(value.getSaltlength());
            resetChangedOnNotNull();
        }
    }
}
