/*
 * This file is generated by jOOQ.
 */
package org.trustdeck.jooq.generated.tables.interfaces;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Index;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "algorithm",
    schema = "public",
    uniqueConstraints = {
        @UniqueConstraint(name = "algorithm_name_alphabet_randomalgorithmdesiredsize_randomal_key", columnNames = { "name", "alphabet", "randomalgorithmdesiredsize", "randomalgorithmdesiredsuccessprobability", "pseudonymlength", "paddingcharacter", "addcheckdigit", "lengthincludescheckdigit" })
    },
    indexes = {
        @Index(name = "algorithm_name_uindex", columnList = "name ASC")
    }
)
public interface IAlgorithm extends Serializable {

    /**
     * Setter for <code>public.algorithm.id</code>.
     */
    public IAlgorithm setId(Integer value);

    /**
     * Getter for <code>public.algorithm.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    public Integer getId();

    /**
     * Setter for <code>public.algorithm.name</code>.
     */
    public IAlgorithm setName(String value);

    /**
     * Getter for <code>public.algorithm.name</code>.
     */
    @Column(name = "name", nullable = false)
    @NotNull
    public String getName();

    /**
     * Setter for <code>public.algorithm.alphabet</code>.
     */
    public IAlgorithm setAlphabet(String value);

    /**
     * Getter for <code>public.algorithm.alphabet</code>.
     */
    @Column(name = "alphabet", nullable = false)
    @NotNull
    public String getAlphabet();

    /**
     * Setter for <code>public.algorithm.randomalgorithmdesiredsize</code>.
     */
    public IAlgorithm setRandomalgorithmdesiredsize(Long value);

    /**
     * Getter for <code>public.algorithm.randomalgorithmdesiredsize</code>.
     */
    @Column(name = "randomalgorithmdesiredsize", nullable = false)
    @NotNull
    public Long getRandomalgorithmdesiredsize();

    /**
     * Setter for
     * <code>public.algorithm.randomalgorithmdesiredsuccessprobability</code>.
     */
    public IAlgorithm setRandomalgorithmdesiredsuccessprobability(Double value);

    /**
     * Getter for
     * <code>public.algorithm.randomalgorithmdesiredsuccessprobability</code>.
     */
    @Column(name = "randomalgorithmdesiredsuccessprobability", nullable = false)
    @NotNull
    public Double getRandomalgorithmdesiredsuccessprobability();

    /**
     * Setter for <code>public.algorithm.consecutivevaluecounter</code>.
     */
    public IAlgorithm setConsecutivevaluecounter(Long value);

    /**
     * Getter for <code>public.algorithm.consecutivevaluecounter</code>.
     */
    @Column(name = "consecutivevaluecounter", nullable = false)
    @NotNull
    public Long getConsecutivevaluecounter();

    /**
     * Setter for <code>public.algorithm.pseudonymlength</code>.
     */
    public IAlgorithm setPseudonymlength(Integer value);

    /**
     * Getter for <code>public.algorithm.pseudonymlength</code>.
     */
    @Column(name = "pseudonymlength", nullable = false)
    @NotNull
    public Integer getPseudonymlength();

    /**
     * Setter for <code>public.algorithm.paddingcharacter</code>.
     */
    public IAlgorithm setPaddingcharacter(String value);

    /**
     * Getter for <code>public.algorithm.paddingcharacter</code>.
     */
    @Column(name = "paddingcharacter", nullable = false, length = 1)
    @NotNull
    @Size(max = 1)
    public String getPaddingcharacter();

    /**
     * Setter for <code>public.algorithm.addcheckdigit</code>.
     */
    public IAlgorithm setAddcheckdigit(Boolean value);

    /**
     * Getter for <code>public.algorithm.addcheckdigit</code>.
     */
    @Column(name = "addcheckdigit", nullable = false)
    @NotNull
    public Boolean getAddcheckdigit();

    /**
     * Setter for <code>public.algorithm.lengthincludescheckdigit</code>.
     */
    public IAlgorithm setLengthincludescheckdigit(Boolean value);

    /**
     * Getter for <code>public.algorithm.lengthincludescheckdigit</code>.
     */
    @Column(name = "lengthincludescheckdigit", nullable = false)
    @NotNull
    public Boolean getLengthincludescheckdigit();

    /**
     * Setter for <code>public.algorithm.salt</code>.
     */
    public IAlgorithm setSalt(String value);

    /**
     * Getter for <code>public.algorithm.salt</code>.
     */
    @Column(name = "salt", nullable = false)
    @NotNull
    public String getSalt();

    /**
     * Setter for <code>public.algorithm.saltlength</code>.
     */
    public IAlgorithm setSaltlength(Integer value);

    /**
     * Getter for <code>public.algorithm.saltlength</code>.
     */
    @Column(name = "saltlength", nullable = false)
    @NotNull
    public Integer getSaltlength();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface IAlgorithm
     */
    public void from(IAlgorithm from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface IAlgorithm
     */
    public <E extends IAlgorithm> E into(E into);
}
