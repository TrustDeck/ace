/*
 * This file is generated by jOOQ.
 */
package org.trustdeck.ace.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.trustdeck.ace.jooq.generated.Indexes;
import org.trustdeck.ace.jooq.generated.Keys;
import org.trustdeck.ace.jooq.generated.Public;
import org.trustdeck.ace.jooq.generated.tables.records.PseudonymRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Pseudonym extends TableImpl<PseudonymRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pseudonym</code>
     */
    public static final Pseudonym PSEUDONYM = new Pseudonym();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PseudonymRecord> getRecordType() {
        return PseudonymRecord.class;
    }

    /**
     * The column <code>public.pseudonym.id</code>.
     */
    public final TableField<PseudonymRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.pseudonym.identifier</code>.
     */
    public final TableField<PseudonymRecord, String> IDENTIFIER = createField(DSL.name("identifier"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.pseudonym.idtype</code>.
     */
    public final TableField<PseudonymRecord, String> IDTYPE = createField(DSL.name("idtype"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.pseudonym.pseudonym</code>.
     */
    public final TableField<PseudonymRecord, String> PSEUDONYM_ = createField(DSL.name("pseudonym"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.pseudonym.validfrom</code>.
     */
    public final TableField<PseudonymRecord, LocalDateTime> VALIDFROM = createField(DSL.name("validfrom"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.pseudonym.validfrominherited</code>.
     */
    public final TableField<PseudonymRecord, Boolean> VALIDFROMINHERITED = createField(DSL.name("validfrominherited"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.pseudonym.validto</code>.
     */
    public final TableField<PseudonymRecord, LocalDateTime> VALIDTO = createField(DSL.name("validto"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.pseudonym.validtoinherited</code>.
     */
    public final TableField<PseudonymRecord, Boolean> VALIDTOINHERITED = createField(DSL.name("validtoinherited"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.pseudonym.domainid</code>.
     */
    public final TableField<PseudonymRecord, Integer> DOMAINID = createField(DSL.name("domainid"), SQLDataType.INTEGER, this, "");

    private Pseudonym(Name alias, Table<PseudonymRecord> aliased) {
        this(alias, aliased, null);
    }

    private Pseudonym(Name alias, Table<PseudonymRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.pseudonym</code> table reference
     */
    public Pseudonym(String alias) {
        this(DSL.name(alias), PSEUDONYM);
    }

    /**
     * Create an aliased <code>public.pseudonym</code> table reference
     */
    public Pseudonym(Name alias) {
        this(alias, PSEUDONYM);
    }

    /**
     * Create a <code>public.pseudonym</code> table reference
     */
    public Pseudonym() {
        this(DSL.name("pseudonym"), null);
    }

    public <O extends Record> Pseudonym(Table<O> child, ForeignKey<O, PseudonymRecord> key) {
        super(child, key, PSEUDONYM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDIDTYPEIDX, Indexes.IDPSNIDX);
    }

    @Override
    public Identity<PseudonymRecord, Long> getIdentity() {
        return (Identity<PseudonymRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PseudonymRecord> getPrimaryKey() {
        return Keys.PSEUDONYM_PKEY;
    }

    @Override
    public List<UniqueKey<PseudonymRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PSEUDONYM_IDENTIFIER_IDTYPE_DOMAINID_PSEUDONYM_KEY, Keys.PSEUDONYM_PSN_DOMAINID_KEY);
    }

    @Override
    public List<ForeignKey<PseudonymRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PSEUDONYM__PSEUDONYM_DOMAINID_FKEY);
    }

    private transient Domain _domain;

    /**
     * Get the implicit join path to the <code>public.domain</code> table.
     */
    public Domain domain() {
        if (_domain == null)
            _domain = new Domain(this, Keys.PSEUDONYM__PSEUDONYM_DOMAINID_FKEY);

        return _domain;
    }

    @Override
    public Pseudonym as(String alias) {
        return new Pseudonym(DSL.name(alias), this);
    }

    @Override
    public Pseudonym as(Name alias) {
        return new Pseudonym(alias, this);
    }

    @Override
    public Pseudonym as(Table<?> alias) {
        return new Pseudonym(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pseudonym rename(String name) {
        return new Pseudonym(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pseudonym rename(Name name) {
        return new Pseudonym(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pseudonym rename(Table<?> name) {
        return new Pseudonym(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, String, LocalDateTime, Boolean, LocalDateTime, Boolean, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super Boolean, ? super LocalDateTime, ? super Boolean, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super Boolean, ? super LocalDateTime, ? super Boolean, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
