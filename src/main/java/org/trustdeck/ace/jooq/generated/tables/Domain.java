/*
 * This file is generated by jOOQ.
 */
package org.trustdeck.ace.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.trustdeck.ace.jooq.generated.Indexes;
import org.trustdeck.ace.jooq.generated.Keys;
import org.trustdeck.ace.jooq.generated.Public;
import org.trustdeck.ace.jooq.generated.tables.records.DomainRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Domain extends TableImpl<DomainRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.domain</code>
     */
    public static final Domain DOMAIN = new Domain();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DomainRecord> getRecordType() {
        return DomainRecord.class;
    }

    /**
     * The column <code>public.domain.id</code>.
     */
    public final TableField<DomainRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.domain.name</code>.
     */
    public final TableField<DomainRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.domain.prefix</code>.
     */
    public final TableField<DomainRecord, String> PREFIX = createField(DSL.name("prefix"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.domain.validfrom</code>.
     */
    public final TableField<DomainRecord, LocalDateTime> VALIDFROM = createField(DSL.name("validfrom"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.domain.validfrominherited</code>.
     */
    public final TableField<DomainRecord, Boolean> VALIDFROMINHERITED = createField(DSL.name("validfrominherited"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.domain.validto</code>.
     */
    public final TableField<DomainRecord, LocalDateTime> VALIDTO = createField(DSL.name("validto"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.domain.validtoinherited</code>.
     */
    public final TableField<DomainRecord, Boolean> VALIDTOINHERITED = createField(DSL.name("validtoinherited"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.domain.enforcestartdatevalidity</code>.
     */
    public final TableField<DomainRecord, Boolean> ENFORCESTARTDATEVALIDITY = createField(DSL.name("enforcestartdatevalidity"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.domain.enforcestartdatevalidityinherited</code>.
     */
    public final TableField<DomainRecord, Boolean> ENFORCESTARTDATEVALIDITYINHERITED = createField(DSL.name("enforcestartdatevalidityinherited"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.domain.enforceenddatevalidity</code>.
     */
    public final TableField<DomainRecord, Boolean> ENFORCEENDDATEVALIDITY = createField(DSL.name("enforceenddatevalidity"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.domain.enforceenddatevalidityinherited</code>.
     */
    public final TableField<DomainRecord, Boolean> ENFORCEENDDATEVALIDITYINHERITED = createField(DSL.name("enforceenddatevalidityinherited"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.domain.algorithm</code>.
     */
    public final TableField<DomainRecord, String> ALGORITHM = createField(DSL.name("algorithm"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.domain.algorithminherited</code>.
     */
    public final TableField<DomainRecord, Boolean> ALGORITHMINHERITED = createField(DSL.name("algorithminherited"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.domain.alphabet</code>.
     */
    public final TableField<DomainRecord, String> ALPHABET = createField(DSL.name("alphabet"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.domain.alphabetinherited</code>.
     */
    public final TableField<DomainRecord, Boolean> ALPHABETINHERITED = createField(DSL.name("alphabetinherited"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.domain.randomalgorithmdesiredsize</code>.
     */
    public final TableField<DomainRecord, Long> RANDOMALGORITHMDESIREDSIZE = createField(DSL.name("randomalgorithmdesiredsize"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>public.domain.randomalgorithmdesiredsizeinherited</code>.
     */
    public final TableField<DomainRecord, Boolean> RANDOMALGORITHMDESIREDSIZEINHERITED = createField(DSL.name("randomalgorithmdesiredsizeinherited"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column
     * <code>public.domain.randomalgorithmdesiredsuccessprobability</code>.
     */
    public final TableField<DomainRecord, Double> RANDOMALGORITHMDESIREDSUCCESSPROBABILITY = createField(DSL.name("randomalgorithmdesiredsuccessprobability"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column
     * <code>public.domain.randomalgorithmdesiredsuccessprobabilityinherited</code>.
     */
    public final TableField<DomainRecord, Boolean> RANDOMALGORITHMDESIREDSUCCESSPROBABILITYINHERITED = createField(DSL.name("randomalgorithmdesiredsuccessprobabilityinherited"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.domain.multiplepsnallowed</code>.
     */
    public final TableField<DomainRecord, Boolean> MULTIPLEPSNALLOWED = createField(DSL.name("multiplepsnallowed"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.domain.multiplepsnallowedinherited</code>.
     */
    public final TableField<DomainRecord, Boolean> MULTIPLEPSNALLOWEDINHERITED = createField(DSL.name("multiplepsnallowedinherited"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.domain.consecutivevaluecounter</code>.
     */
    public final TableField<DomainRecord, Long> CONSECUTIVEVALUECOUNTER = createField(DSL.name("consecutivevaluecounter"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.domain.pseudonymlength</code>.
     */
    public final TableField<DomainRecord, Integer> PSEUDONYMLENGTH = createField(DSL.name("pseudonymlength"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.domain.pseudonymlengthinherited</code>.
     */
    public final TableField<DomainRecord, Boolean> PSEUDONYMLENGTHINHERITED = createField(DSL.name("pseudonymlengthinherited"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.domain.paddingcharacter</code>.
     */
    public final TableField<DomainRecord, String> PADDINGCHARACTER = createField(DSL.name("paddingcharacter"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>public.domain.paddingcharacterinherited</code>.
     */
    public final TableField<DomainRecord, Boolean> PADDINGCHARACTERINHERITED = createField(DSL.name("paddingcharacterinherited"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.domain.addcheckdigit</code>.
     */
    public final TableField<DomainRecord, Boolean> ADDCHECKDIGIT = createField(DSL.name("addcheckdigit"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.domain.addcheckdigitinherited</code>.
     */
    public final TableField<DomainRecord, Boolean> ADDCHECKDIGITINHERITED = createField(DSL.name("addcheckdigitinherited"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.domain.lengthincludescheckdigit</code>.
     */
    public final TableField<DomainRecord, Boolean> LENGTHINCLUDESCHECKDIGIT = createField(DSL.name("lengthincludescheckdigit"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.domain.lengthincludescheckdigitinherited</code>.
     */
    public final TableField<DomainRecord, Boolean> LENGTHINCLUDESCHECKDIGITINHERITED = createField(DSL.name("lengthincludescheckdigitinherited"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.domain.salt</code>.
     */
    public final TableField<DomainRecord, String> SALT = createField(DSL.name("salt"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.domain.saltlength</code>.
     */
    public final TableField<DomainRecord, Integer> SALTLENGTH = createField(DSL.name("saltlength"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.domain.description</code>.
     */
    public final TableField<DomainRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.domain.superdomainid</code>.
     */
    public final TableField<DomainRecord, Integer> SUPERDOMAINID = createField(DSL.name("superdomainid"), SQLDataType.INTEGER, this, "");

    private Domain(Name alias, Table<DomainRecord> aliased) {
        this(alias, aliased, null);
    }

    private Domain(Name alias, Table<DomainRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.domain</code> table reference
     */
    public Domain(String alias) {
        this(DSL.name(alias), DOMAIN);
    }

    /**
     * Create an aliased <code>public.domain</code> table reference
     */
    public Domain(Name alias) {
        this(alias, DOMAIN);
    }

    /**
     * Create a <code>public.domain</code> table reference
     */
    public Domain() {
        this(DSL.name("domain"), null);
    }

    public <O extends Record> Domain(Table<O> child, ForeignKey<O, DomainRecord> key) {
        super(child, key, DOMAIN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.METADATAIDX);
    }

    @Override
    public Identity<DomainRecord, Integer> getIdentity() {
        return (Identity<DomainRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DomainRecord> getPrimaryKey() {
        return Keys.DOMAIN_PKEY;
    }

    @Override
    public List<UniqueKey<DomainRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.DOMAIN_NAME_KEY);
    }

    @Override
    public List<ForeignKey<DomainRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DOMAIN__DOMAIN_SUPERDOMAINID_FKEY);
    }

    private transient Domain _domain;

    /**
     * Get the implicit join path to the <code>public.domain</code> table.
     */
    public Domain domain() {
        if (_domain == null)
            _domain = new Domain(this, Keys.DOMAIN__DOMAIN_SUPERDOMAINID_FKEY);

        return _domain;
    }

    @Override
    public Domain as(String alias) {
        return new Domain(DSL.name(alias), this);
    }

    @Override
    public Domain as(Name alias) {
        return new Domain(alias, this);
    }

    @Override
    public Domain as(Table<?> alias) {
        return new Domain(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Domain rename(String name) {
        return new Domain(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Domain rename(Name name) {
        return new Domain(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Domain rename(Table<?> name) {
        return new Domain(name.getQualifiedName(), null);
    }
}
